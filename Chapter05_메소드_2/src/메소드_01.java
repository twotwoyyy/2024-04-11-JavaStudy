/*
 *	클래스
 *	-----
 *	 구성요소
 *	  class ClassName
 *	  {
 *	    -----------------------------------------
 *		 변수 ==============> 클래스 전체 (전역변수)
 *		  = 멤버 변수
 *		  = 공유 변수
 *		  = 메소드 안에 선언되는 변수 => 매개변수, 지역변수
 *		  = 객체지향 프로그램 => 캡슐화 (데이터 보호)
 *	    -----------------------------------------
 *		 생성자 : 변수의 초기화, 클래스 저장시에 호출 
 *              => 필요시에만 사용 
 *	    -----------------------------------------
 *		 메소드 : 기능 수행 ==> 수정 (오버라이딩) => 가독성 => 유지보수
 *              예) 게시판 
 *                = 글쓰기 
 *                = 상세보기
 *                = 조회수 증가
 *                = 수정하기
 *                = 추가하기
 *                = 삭제하기
 *                = 검색하기
 *	    -----------------------------------------
 *		}
 *		= 기존의 프로그램을 기능별로 나눠서 작업(분업화) 
 *										-----
 *		= 메소드는 반드시 한 개의 기능만 수행 => 재사용하기 편리하다
 *					  ----------------
 *		예) 게시판 + 댓글 (x) , 게시판 / 댓글 (o) <= 따로 설정해야 편리하다
 *		모든 프로그램 세분화
 *		----------------
 *		1. 입력
 *		2. 처리
 *		3. 출력
 *		----------------
 *		메소드 
 *			= 선언부 => 추상메소드
 *			  접근지정어
 *				전체 프로그램에서 사용 => public
 *				상속받은 클래스 => protected 
 *				같은 폴더까지 => default (아무것도 붙지 않음)
 *				----------------------
 *				클래스안에서만 접근 => private
 *			  옵션
 *				공유하는 메소드 : static => 자동으로 메모리에 저장 
 *							  -------
 *				선언하는 메소드 : abstract
 *				수정할 수 없는 메소드 : final
 *			  리턴형 : 사용자 요청에 따른 처리후 결과값
 *				기본형 (byte,int,char,String,double,long)
 *				=> 결과값이 1개일 때 사용 
 *				배열 => 결과값이 여러 개 있는 경우 => sort 
 *				클래스 => 일반 웹 => 상세보기 
 *				*** 결과값 없이 메소드 자체 처리 => 결과값 없다 (void)
 *			  메소드명 : 변수 식별자와 동일
 *						** 소문자로 시작한다
 *			  매개변수 : 사용자가 보내준 값 (요청)
 *			  ------ 여러 개 사용이 가능 
 *						=> 기본형, 배열, 클래스 
 *								 -----------
 *						    매개변수가 3개 이상이면 사용 
 *
 *		형식!!!  [접근지정어][옵션] 리턴형 메소드명(매개변수....)
 *                           ------
 *                           
 *			= 구현부 => 일반메소드
 *			  {
 *				구현부
 *				=> 반드시 결과값을 보내준다
 *				return 값;
 * 					   --
 *			  }
 *			= 메소드 사용하는 목적
 *			1. main에 소스 코딩 => 한 번 쓰고 버린다 (절차적 언어)
 *			==> 재사용 (수정 편리) ******
 *				사이트 기능 => 게시판, 공지사항, 회원가입, 예먁, 결재, 장바구니 
 * 
 *			==> 가독성
 *			==> 중복코드 제거
 *
 *		1. 원형
 *		리턴형 메소드명(매개변수) => 라이브러리 => 기능 
 *		---- ------- -----      --------------
 *		2. 유형
 *		--------------------
 *		 리턴형      매개변수
 *		--------------------
 *		  O           O     => String
 *							   String substring(int start)
 *							   ------           ----------
 *		--------------------              
 *		  O           X     => String trim() => 공백만 제거
 *						       double random() => 임의의 수 추출
 *		--------------------   
 *        X           O     => void print("")
 *		--------------------
 *		  X           X     => 빈도수가 거의 없다
 *							   다음줄
 *							   System.out.println()
 *		--------------------
 *			** 리턴형이 없는 경우에는 메소드 자체 러리
 *				=> 출력할 경우
 *				=> 브라우저나 핸드폰에 전송 => 리턴형
 *				=> 리턴형 => 오라클 자체 처리 (Insert,Update,Delete)
 *		
 */
//2단~ 9단까지 구구단 출력 => 매개변수 필요x 리턴형x 
public class 메소드_01 {
	static void gugudan() {
		for(int i=1;i<=9;i++) { // 줄수
			for(int j=2;j<=9;j++) { // 출력 => 구구단
				System.out.printf("%2d*%2d=%2d\t",j,i,j*i);
			}
			System.out.println();
		}
	}
	/* <호출하는 방법>
	 * void aaa();
	 * 	=> aaa();
	 * 
	 * int bbb(int a);
	 * ---     ----- > a=10
	 * 	=> int a=bbb(10)
	 * 
	 * void ccc(char c);
	 * 	=> ccc('A')
	 * 
	 * double rand(int num);
	 * ------ 리턴형이 있으면 리턴값 받아야한다
	 * 	=> double d=rand(3)
	 * 	   ------ 리턴한 값을 받는다 (데이터형 일치)
	 * 
	 * String getName()
	 * 	=> String name=getName()
	 * 
	 * String setName(String name)
	 * 	=> String name=setName("홍길동")
	 * 
	 * *** 메소드는 호출시에 무조건 메소드의 시작부터 끝까지 수행한다!! 
	 *     수행이 종료가 되면 호출된 위치로 복귀 
	 */
	public static void main(String[] args) {
		gugudan();
	}

}
