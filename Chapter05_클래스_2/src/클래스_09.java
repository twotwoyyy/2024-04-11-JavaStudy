// 122page
/*
 *	객체 생성
 *	------
 *	형식) new 생성자()
 *          -------- 클래스명과 동일해야 한다 
 *  예) 
 *  	class A
 *  	{
 *  	}
 *  	A a=new A();
 *  	  객체 => 멤버변수/멤버 메소드를 관리
 *  
 *   	배열
 *        int[] arr=new int[2];
 *        
 *        ---arr---
 *           0X100       arr[0] arr[1] => 메모리 크기가 동일, 고정적으로 설정, 같은 데이터형만 사용이 가능 
 *        ---------  =>  --------------
 *                          0      0
 *                      |--------------
 *                    0X100
 *      클래스 (다른 데이터형도 함께 모을 수 있다) 
 *        class A
 *        {
 *          String name;
 *          int age;
 *        }
 *        A a=new A();
 *        
 *        ----a-----
 *           0x200 ==> 0x200에 있는 name이라는 변수값을 읽어온다 => a.name
 *        ----------  =>0x200-----------------
 *                             --- name----
 *                                 null
 *                             ------------
 *                          
 *                             ----age----- => a.age
 *                                  0
 *                             ------------
 *                          --------------------
 *       123page
 *       
 *       A a=new A();
 *           --- ----
 *             생성자 | 멤버변수의 초기값을 대입해주는 역할 => 같이 다닌다 
 *       new | 클래스에 있는 멤버변수를 저장할 수 있는 공간을 만들어 준다
 *             a라는 공간에 저장된 메모리 주소를 넘겨주는 역할 
 *           *** 생성자 호출시에는 반드시 new 생성자()
 *                                ------------
 *       객체  | 저장되어 있는 변수나 메소드를 관리 => 객체 => 설계(클래스)
 *       
 *       1. 설계 => Class
 *       2. 메모리 저장 => new
 *       3. 활용 => new로부터 받은 메모리를 이용해서 활용 => 객체
 *       --------------------------------------------객체지향 프로그램
 *       주목적 : 재사용 , 수정/추가 편리 
 *       
 *       => 객체 사용
 *         1. 생성
 *           A a=new A();
 *           ---------------
 *           A a;
 *           a=new A();
 *         2. 사용시에는
 *           a.변수
 *           a.메소드
 *           --------------- .은 메모리 주소 접근 연산자 
 *                              -----------------
 *       => 참조변수 (객체) => 메모리 주소를 이용하는 방식 
 *       => 일반변수 => 메모리에 저장된 값을 이용하는 방식 
 *       
 *       int a=10;
 *       int b=a;  => 주소 이용 x , 값만 넘겨주는 상태 
 *       
 *          ---a---  ---b---
 *             10  =>   10
 *          -------  -------
 *          값만 넘겨주는 상태 => a값을 변경/ b값을 변경시에
 *                          --------- ----------
 *                                    |a는 변경되지 않는다 
 *                          |b는 변경이 안된다 
 *      class A
 *      {
 *      	String name;
 *      	int age;
 *      }
 *      A a=new A();
 *      
 *      주소=> Stack   실제 데이터값 저장
 *      ---a---           Heap
 *      
 *      -------   0x100----------------
 *                      -----name----
 *                           null                 
 *                      -------------
 *                      
 *                      -----age-----
 *                            0
 *                      -------------
 *                     ----------------
 *      A b=a;
 *      ---b---          
 *       0X100 => a.name /b.name => 동일, a.age/b.age 바뀐다 
 *      -------   0x100----------------
 *                      -----name----
 *                           null                 
 *                      -------------
 *                      
 *                      -----age-----
 *                            0
 *                      -------------
 *                     ----------------
 *      ** 메모리 주소가 같은 경우에는 같은 메모리를 제어한다 => 별칭 
 */
class A{
	String name;
	int age;
	
}
public class 클래스_09 {

	public static void main(String[] args) {
		//int a=10;
		//int b=a;
		//b=100; //값만 이동했기 때문에 a는 변하지 않는다
		//System.out.println("a="+a);
		//System.out.println("b="+b);
		A a=new A();
		// a=> name/age2개변수 가지고있음
		System.out.println("a="+a); // 메모리 주소 확인
		//객체가 관리하는 메모리 주소 확인 
		a.name="박문수";
		a.age=30;
		System.out.println("a.name="+a.name);
		System.out.println("a.age="+a.age);
		
		//메모리 주소를 받는 경우 
		A b=a; // a의 별칭 => 동시에 같은 메모리 변수 사용이 가능
		System.out.println("b="+b);
		b.name="이순신";
		b.age=25;
		System.out.println("b.name="+b.name);
		System.out.println("b.age="+b.age);
		// 주소값을 넘기면 그 자체를 갱신한다 
		System.out.println("a.name="+a.name);
		System.out.println("a.age="+a.age);
		
		// 배열 / 클래스는 메모리 주소를 이용한다 => 대입하면 같은 메모리를 제어할 수 있다 (참조변수) 
	}

}
