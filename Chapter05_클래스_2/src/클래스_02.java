/*
 * 114p
 * 	객체 => 변수 (어러 개의 변수와 여러 개의 메소드를 동시에 관리하는 영역) 
 * 		== 설계 => 영역 class
 *      --- 동시에 관리를 위해서는 저장 => new
 *      
 * 115p
 *      학생
 *       학번 이름 학교명 주소 성별 주소 전화... => 변수
 *       ------ -------- ----------
 *              | 한 개의 이름만 가지고 있다 static
 *          |                 |
 *          ----------------
 *          학생마다 따로 가지고 있는 변수 => new 따로 저장하는 공간을 만들어준다
 * 		=> 명사적 => 변수
 * 		=> 동사적 => 메소드 : 점심을 먹는다, 시험본다, 게임을 한다 (동작) 
 * 
 * 		변수 / 변수 활용하는 메소드 => 클래스 => 관리 (객체) 
 * 		=> 예) 
 * 			  시계 
 * 			   시침/분침/초침
 * 
 *      => 객체란 현실세계/비현실 세계를 특성화 시킨 것이다  *** 
 *                              ---- 추상화 --- 단순화 
 *                              
 *      벤치마킹 (사이트 결정) ====> 분석 (명사적 , 동사적)  ======> 클래스 설계 
 *                                   |    |                필요한 데이터 (변수), 사용자행위(메소드)
 *                                  출력물 클릭 / 메뉴선택...         |
 *                                                        	  공통으로 사용되는 변수
 *     ------------
 *     115page
 *      = 클래스명
 *        변수 식별자와 동일
 *        -------------
 *         알파벳이나 한글로 시작한다 (알파벳은 대소문자 구분)
 *         특수문자(_,$) => (_을 많이  사용 => 단어 2개인 경우 , 임시 클래스)
 *                         Main_ Class   File_Name  _Temp
 *         숫자 사용이 가능 (앞에서만 사용 x)
 *         공백 사용 불가능
 *         키워드라느 사용 불가
 *         ===
 *         약속 
 *          = 한글은 가급적이면 사용하지 않는다 => 알파벳을 이용한다
 *          = 알파벳 시작 첫문자는 대문자로 한다 
 *          -------------------- 
 *          같은 폴더에서는 같은 이름의 클래스명을 사용할 수 없다
 *          한 개의 파일 (.java)에 여러 개 클래스를 만흘 수 있다 ./사용 가능
 *          = 클래스: 형태 
 *           1) 데이터형 클래스 
 *           변수만 설정 => 사용자 정의 데이터형
 *           			~VO(Spring), DTO(MyBatis),~Bean(JSP)
 *           2) 액션 클래스 
 *           메소드 설정 => 기능만 처리
 *           			~DAO, ~Manager, ~Controller (요청 => 응답)
 *       class ClassName
 *       {
 *       	*** 멤버변수
 *       		new => 저장 => 따로 메모리 생성 => 인스턴스 변수
 *       		컴파일시 저장 => 한 개의 메모리 생성 => 정적 변수 => static
 *    		*** 초기화
 *              인스턴스 변수 : {}, 생성자
 *              static 변수 : static{}, 생성자 => 자동 저장이 가능 => 생성자를 이용하지 않는다
 *          *** 변수활용 => 메소드 
 *              
 */	
public class 클래스_02 {

	public static void main(String[] args) {

	}

}
