/*
 * 클래스의 구조 => 프로그램에 맞게 데이터/메소드를 관리를 위한 설계 
 * ==> 활용은 메모리에 저장한 다음 사용
 *          --------- 
 *          new 생성자() => 받은 주소를 이용한다
 *                        -------------- 객체 
 * class ClassName
 * {
 *   ----------------
 *    변수 (멤버변수) => 클래스가 가지고 있는 변수 
 *   ----------------
 *    초기화 
 *     = 초기화 블록
 *     = 생성자 이용
 *   ----------------
 *     = 메소드   
 *   ----------------
 * }
 * ** 순서는 상관 없다
 * ** 변수 (어떤 데이터 활용) => 변수 
 *   => 기능 설정 (메소드) 데이터 활용
 *   => 초기화 결정 
 *   => 기타 변수 => 지역 변수로 활용 
 *   
 * 멤버변수 : new를 사용해서 저장이 가능
 *         클래스 전체 / 다른 클래스에 사용이 가능 
 *         일반변수와 동일하나 따로 저장, 사용범위 넓다 
 *         => 클래스는 한 개에 대한 정의
 *            => 영화 1개 / 레시피 1개 => 저장만 여러 개 
 *         ** 공통변수가 사용되는 경우 staic 변수를 이용한다
 * 생성자 : 클래스명과 동일 / 리턴형이 없다
 *        => 역할 메모리 할당할 때 호출되는 메소드
 *        => 멤버변수의 초기화 담당 
 *           ---------------- 서버 구동/ 화면 UI / 데이터베이스 연동
 *        => 반드시 필요하다 => 경우에 따라서 생략할 수 있다 => 컴파일러가 자동으로 생성자를 추가
 * 메소드 : 멤버변수가 가지고 있는 데이터를 활용할 수 있게 기능을 추가
 * -------------------------------------------------------- 클래스의 구성요소 
 * *** 다른 클래스에서 사용이 가능하다
 *     메소드 => 다른 클래스와 통신(연결)
 *     ---- 기능 변경 / 추가 
 *          오버라이딩  오버로딩
 * *** 객체 지향 프로그램 (OOP) => SM/SI 
 *     1) 캡슐화 : 데이터 보호 목적 => 파밍 => 크롤링 (X) => 래킹 => Vue/React/Ajax
 *     2) 재사용 ㅣ 상속, 포함
 *               --- ----
 *                   | 있는 그대로 사용
 *               |변경해서 사용 
 *     3) 다형성 : 오버라이딩/오버로딩(생성자가 지원) => 같은 이름의 메소드를 여러 개 만들어서 사용
 * ------------------------------------------------- 객체지향의 3대 특성 
 *  	자바 => 데이터 영구적 저장 => 화면 UI => 연결
 *                오라클         HTML/CSS  JSBC/JSP
 * ------------------------------------------------------ 통합(Spring)
 *                                                       ---------------  자바기반
 *   *** 프로그램이 비정장 종료가 안되게 만든다 : 예외처리
 *    
 */
class Movie {
	int rank;
	String title;
	String reserve;
	String regdate;
}
public class 클래스_05 {
	public static void main(String[] args) {
		Movie m1=new Movie();
		System.out.println("m1="+m1);
		m1.rank=1;
		m1.title="범죄도시4";
		m1.reserve="27.4%";
		m1.regdate="2024.04.24";
		/*
		 *  ---m1---------
		 *  Movie@1eb44e46
		 *  --------------
		 *  
		 *  				Movie@1eb44e46
		 *  				--------------
		 *                    -----------
		 *                        1       ===> rank => m1.rank
		 *                    -----------
		 *                       범죄도시4   ===> title => m1.title
		 *                    -----------
		 *                      27.4%     ===> reserve => m1.reserve
		 *                    -----------
		 *                    2020.04.24  ===> regdate => m1.regdate
		 *                    -----------
		 *                  ---------------
		 */
		
		Movie m2=new Movie();
		System.out.println("m2="+m2);
		m2.rank=2;
		m2.title="혹성탈출-새로운 시대";
		m2.reserve="24.2%";
		m2.regdate="2024.05.08";
		
		Movie m3=new Movie();
		System.out.println("m3="+m3);
		m3.rank=1;
		m3.title="악마와의 토크쇼";
		m3.reserve="15.2%";
		m3.regdate="2024.05.08";
		
		
	}
}
