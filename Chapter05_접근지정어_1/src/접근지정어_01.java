// lombok => 캡슐화 코딩할 때 쓰임
/*
 *	객체 지향 프로그램 => 자바 (CBD) => 데이터 관리 
 *	-------------       => 이미 필요한 기능은 존재 => 조립해서 만드는 프로그램 (레고)
 *	1. 클래스
 *    = 변수 설정 (어떤 데이터가 필요한지) : 캡슐화 (데이터 보호) => getter/setter
 *      ------
 *      기본형 => 정수,실수,논리,문자
 *      배열
 *      클래스 => 포함 클래스 : String => 데이터형의 일종
 *     1) 요구사항 
 *        => 데이터 선언 
 *        => 데이터 선언 => 데이터 수집 => 데이터 분석 => 데이터를 분리 => 데이터 예측 
 *           -------------------------------------------------------- 머신러닝 / 딥러닝 
 *                                                                    -------------
 *                                                                    |예측 => 프로그램 제작 (AI)
 *     2) 기능 설정 : 목록/상세보기/예약/결제 .... 메소드 
 *     ------------------------------------------
 *     변수 + 메소드 => 한 개의 기능 => 설계 (클래스) => 활용 => 객체 
 *           | 기능이 변경될 수 있다 => 사용자가 요구 (오버라이딩)
 *     ---------- 객체에 의해 관리 
 *     
 *    = 변수에 초기값 : 생성자 => 서버 / 데이터베이스 (미리 연결)
 *    = 변수 활용 : 메소드 => 기능(수정,추가) => 다형성 (오버로딩/오버라이딩) => 웹(메뉴)
 *    
 *	2. 접근지정어 => public / private / protected / default (접근 범위 지정) => 127page
 *    
 *	3. 상속 / 포함 => 재사용기법 
 *                 있는 그대로 사용 : 포함 => Spring => POJO
 *                 변경해서 사용 : 상속 => 윈도우,네트워크,쓰레드
 *  -------------------------- 객체 지향의 3대 특성 (캡슐화,상속,다형성) => 면접 !! --------
 *	4. 클래스 종류
 *    = 일반 클래스 *
 *    = 추상 클래스
 *    = 인터페이스 *
 *    = 내부 클래스
 *      = 멤버 클래스 *
 *      = 익명의 클래스 *
 *      = 지역 클래스
 *    = 종단 클래스 
 *    
 *  5. 조립법 
 *    = 패키지 => 관련 클래스끼리 모아서 관리 : import
 *      ---- 폴더 java, javax
 *      
 *  6. 예외처리 : 프로그램의 비정상종료 방지, 사전 에러를 방지 
 *                                 ------------
 *                                 파일 : 경로명,파일명 
 *                                      ----- FileReader
 *                                 네트워크 : URL/Server IP
 *                                         ---- Jsoup
 *                                         
 *  ------------- 객체지향의 기본문법 (~8장)
 *  7. 라이브러리 (자바), 외부에서 지원 (Jsoup, lombok)
 *                   --------------------------
 *                   mvnrepository.com
 *  J2SE
 *  ----------------------------------------------------
 *  J2EE : 웹 개발 => JSP/Srvlet (기업용 환경)
 *  --------------------------------------- maven, spring-boot 
 *  => 기본 이론, 구현 => 웹(구현)
 *     ------ 면접 
 *     
 *  1) 클래스와 구조 (설계) 
 *     class ClassName 
 *    {
 *     --------------------
 *      데이터 선언 
 *       => 멤버변수
 *         = 인스턴스변수 : new 사용시마다 메모리가 따로 생성 => 여러 개 저장이 가능 
 *         = 정적변수 : static => 메모리 공간을 1개만 사용 
 *         = 변수 : 메모리에 저장 / 메모리에 읽기 
 *                ----------  ---------- 메소드화 
 *                  setter      getter
 *         *** static을 제외한 모든 변수는 은닉화 (데이터 보호) => 캡슐화 
 *                                                     ------ 필요시에는 사용이 가능 
 *             => 시큐어 코딩 
 *         = 다른 클래스와 연결해서 사용이 가능하게 만든다 
 *         = 객체 == 객체 => 상호 연결해서 사용 
 *           ---------
 *           예)
 *              사람  == 자판기
 *               동전 투입 => 음료수 선택 => 잔돈 => 접근지정어  
 *              사람  == 컴퓨터 => 메소드 (명령어) 
 *              사용자 == 게임
 *              시용자 == 웹사이트
 *              요청      응답 
 *              
 *              ==> 프로그램 (Actor) => 행위자
 *              ==> 사용자 : 회원가입 (관리자) 
 *              -------------------------- 유스케이스 다이어그램 
 *     
 *     --------------------
 *      데이터 초기화 => 클래스 영역 안에는 선언만 가능 => 구현 x 
 *       생성자 === 모든 클래스에서 반드시 한 개 이상을 포함한다 
 *               => 생략할 경우에는 컴파일러가 자동으로 생성 : default 생성자 
 *               => default 생성자는 매개변수가 없는 생성자이다 
 *               class A
 *               {
 *                 A(); ==> default 생성자 => 없는 경우에 자동 추가 
 *                 A(int a){}
 *                 A(int a, int b){}
 *               }
 *        = 리턴형이 없다 
 *        = 클래스명과 동일하다 
 *        = 여러 개 사용이 가능 => 오버로딩
 *        = 객체 생성시 반드시 호출 
 *        = 시작과 동시에 처리 해야되는 기능이 있는 경우 => 화면 UI
 *       초기화 블록 => 인스턴스변수 => 자동으로 처리 (호출하지 않는다)
 *       {
 *         구현이 가능
 *         => 자동 로그인, 쿠키, 세션 등록, 데이터베이스 연동 ... 
 *       }
 *       정적 블록
 *       static
 *       {
 *         static 변수의 초기화 
 *       } 
 *     --------------------
 *      메소드 : 요청 처리 => 응답 => 웹(메뉴) => 버튼, 마우스 클릭 
 *     --------------------
 *    }
 *    ============ 설계 => 메모리에 저장 
 *   
 *  2) 객체 생성
 *     클래스명 변수명(객체) = new 클래스명()
 *                           ------- 저장공간을 만들어 주면 => 초기값을 대입하는 역할 
 *                       --- 클래스 크기만큼 메모리 확보 => 저장할 공간을 만들어 준다 
 *            -------- 변수,메소드 => 동시에 관리 => 객체
 *       
 *  3) 객체 활용
 *     객체명.변수명, 객체명.메소드명() ==> . (연결된 주소에 접속하는 연산자)
 *     
 *  4) 객체 소멸
 *     disconnection 
 *     객체명=null => 연결되는 주소를 지워준다 (사용(x) => "가비지 컬렉션" 대상) 
 *                                              ---------- 주소가 null인 경우, 사용하지 않는 경우 
 *                                              ---------- 메모리를 자동으로 회수
 *   * 데이터를 저장할 메모리를 만들고 초기값을 설정 => 바로 사용이 가능하게 만든다
 *   ----------------------------------------------------------
 *   자바 번역)
 *            new 클래스명() 
 *   여러 개의 데이터 / 여러 개 메소드가 존재 
 *   ------------------------------ . 을 이용해서 접근 
 *   
 *   => 자바 프로그램의 순서 
 *      관련된 클래스를 모아 준다 : 패키지 
 *      -------------------------- client / server => user/admin
 *      => 입출력 => java.io , javax.swing , java.util (관련된 것끼리 묶어준다 : 패키지)
 *      package 경로명; : 한 번만 사용이 가능 
 *      필요한 클래스를 가지고 온다 : 사용자 정의, 라이브러리 
 *      import ... : 여러 개 사용이 가능 
 *      
 *      class ClassName
 *      {
 *      }
 *      
 *      패키지가 만들어진 경우 
 *      ---------------
 *      연결 (조립) => 접근의 문제 
 *      ---------------------------- 접근지정어
 *      --------------------------------------------------------------------
 *                  자신의 클래스   같은 패키지  같은 패키지+상속(다른 패키지)   모든 클래스
 *      --------------------------------------------------------------------
 *       **private      o                                         => 본인
 *                    멤버변수 설정할 때 많이 쓰인다 
 *      --------------------------------------------------------------------
 *       **default      o          o
 *      --------------------------------------------------------------------
 *       pritected      o          o             o
 *      --------------------------------------------------------------------
 *       **public       o          o             o                   o(오픈) => 공개
 *                     클래스 / 메소드 / 생성자 => 다른 클래스와 연결
 *      --------------------------------------------------------------------
 *      
 *      ** 클래스 : public으로 선언 
 *      ** 메소드 : 다른 클래스와 통신 => public 
 *      ** 변수 : 다른 클래스에서 사용되지 않게 => private => 은닉화 
 *               -------- 사용할 수도 있다 => getter/setter
 *      ** 생성자 : 다른 클래스에서 메모리 할당 => public
 *      ------------------------
 *      
 *      접근 범위의 크기 
 *      private < default < protected < public
 *      
 *      1. 자바 프로그램은 모아서 관리 
 *      -----------------------
 *       1) 변수 
 *       2) 연산자
 *       3) 제어문
 *       -------- 문법 사항
 *       
 *       묶음 => 한 개의 이름으로 제어 
 *       1) 변수 => 여러 개 (변수가 여러 개 있는 경우 => 제어하기가 어려움) 
 *                => 한 개의 이름으로 제어 할 수 있게 한다 
 *                => 배열 => 이름은 1개 , 인덱스
 *                   -- 단점) 고정적, 연속적으로 메모리를 설정 => 같은 크기(데이터형)만 모아서 관리 
 *                      => 보완 : 클래스 (.) => 다른 데이터형도 모을 수 있다 (제한이 없다)
 *       2) 명령문 => 연산자/제어문 => 단점 (중복,다시 처음으로 돌아갈 수 없다)
 *                  --------------------------------------------
 *                  묶어서 사용 => 메소드 (명령문의 집합)
 *      ------------------------------------------- + 클래스 
 *        클래스
 *          => 변수만 묶어서 사용 : 사용자 정의 데이터형 
 *          => 관련된 메소드만 묶어서 사용 : 액션 클래스 
 *          => 변수 + 메소드 = 혼합해서 사용 
 *        클래스 => 기능별로 다시 묶어서 사용
 *                -----
 *                게시판/회원가입/맛집/여행 ...=> 패키지 => 다른 패키지면 같은 이름의 클래스명 사용이 가능
 *                                        -----
 *                                        | 교보서적 o 
 *                                        | 헌책방 
 *                board
 *                 => BoardList
 *                 => BoardInsert
 *                 => BoardDetail.. 패키지 
 *          => 폴더별 구분 => 검색 
 */
public class 접근지정어_01 {

	public static void main(String[] args) {

	}

}
