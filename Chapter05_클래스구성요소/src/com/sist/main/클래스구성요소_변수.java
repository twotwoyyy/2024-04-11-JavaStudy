package com.sist.main;
/*
 *	클래스 구성요소
 *  ----------
 *   *** 클래스 블록
 *   class ClassName
 *   {   --- 제어문/연산처리/파일읽기 등....<= 구현하려면 생성자, 초기화블록 등을 이용해야 한다
 *    => 구현이 불가, 선언만 가능  ------ 한 개만 저장 가능 
 *                --------- 1. 변수 2. 클래스 (사용자 정의 데이터명) 3. 배열
 *                                 -------------------------------- 여러 개 저장 가능
 *                          --------------------------------------- 변수형 
 *   }
 *  -----------------------------------------------------------------------
 *   변수 : 프로그램에 필요한 데이터를 저장공간 => 프로그램 종료시까지 유지하는 변수 => 멤버변수
 *         => 멤버 변수: 자동초기화 (default) 
 *  -----------------------------------------------------------------------
 *   변수 => 초기화 (변수는 초기값이 없는 상태에서는 메모리에 저장이 안됨)
 *   생성자 
 *    = 특징 (일반 메소드와 다르다)
 *     1) 클래스명과 동일 
 *     2) 리턴형이 없다 => void(리턴형) 
 *       예) class A 
 *         { 
 *           void A(){} => 일반 메서드
 *           A(){} => 생성자
 *         }
 *     3) 여러 개의 생성자를 만들 수 있다 
 *        ----------- 생성자는 같은 이름의 메서드를 여러 개 만들 수 있다 (오버로딩)
 *        ***오버로딩 : 같은 이름의 메소드로 새로운 기능을 추가  
 *          1. 메소드명이 동일
 *          2. 매개변수의 개수나 데이터형이 다르다
 *          3. 리턴형은 관계 없다 
 *          4. 접근지정어와 관련 없다 
 *          예) 
 *            plus(int a,int b) => plus(int,int)
 *            plus(double d, double d2) => plus(double,double)
 *            plus(int a, double d)
 *            plus(byte b, int i)
 *            plus(char a, char b)
 *     
 *      4) 생성자의 역할 => 역할이 필요없는 경우도 있기 때문에 생략 가능 
 *       ** 반드시 생성자는 필요하다
 *       ** 생략이 된 경우에는 생성자 하나를 자동으로 컴파일러가 추가 시켜준다 (default)
 *        1. 멤버변수의 초기화 담당 
 *        2. 클래스를 메모리에 저장할 때 호출되는 메소드
 *           -------------------------------
 *        3. 시작과 동시에 처리해야하는 기능이 있는 경우
 *           -------------
 *           ex) 화면 UI, 오라클 연동, 서버 연결, 웹 자동로그인 처리...
 *           
 *      5) 생성자 호출
 *        => new 생성자(); 
 *           --- new 없이 호출하면 오류, 반드시 new 붙여야 한다 
 *           
 *          
 *   초기화블록 : 호출 없이 자동으로 처리 
 *   인스턴스 변수 
 *   {
 *     구현 후 초기화
 *   }
 *   정적 변수
 *   static
 *   {
 *     static 변수의 초기화 
 *   }
 *   
 *   ** 초기화 방법 
 *    =명시적인 초기화 
 *     int a=100; => 명시적인 초기화가 기본 => 명시적 초기화가 안될 떄 초기화 블록, 생성자 이용 
 *    =초기화 블록
 *     int a;
 *     {
 *      a=100; => 파일 읽기, 웹... 등 구현이 필요한 부분이 있을 때 사용
 *     }
 *    =생성자
 *     int a;
 *     생성자();
 *     {
 *      a=100; => 파일 읽기, 웹... 등 구현이 필요한 부분이 있을 때 사용
 *     }
 *    ex) random => 메서드 호출이 필요 => 초기화 블록, 생성자 이용... 
 *    
 *    => 저장되는 순서
 *     기본값 > 명시적인 초기값 > 초기화 블록 > 생성자
 *     ------------------------------------- 동시에 작용 x
 *     
 *     예) 
 *       class ClassName
 *       { 
 *         int a=100; // 명시적 초기값
 *         {
 *           a=200; // 초기화 블록
 *         }
 *         
 *         ClassName()
 *         {
 *           a=300; // 생성자 
 *         }
 *        }
 *        
 *         a      a      a      a
 *       -----  -----  -----  -----
 *         0     100    200    300   => a=300
 *   ----------------------------------------------------------------------
 *    메소드 : 특정 기능을 수행하는 명령문의 집합 
 *           ------ 
 *            검색, 목록 출력, 페이지 나누기.. 
 *           1. 재사용
 *           2. 기능별로 나누어져 있다 => 수정 편리
 *           3. 반복 기능을 제거
 *           4. 구조적인 프로그램을 만들 수 있다 (2번과 동일)
 *           5. 역할 : 기능 수행, 다른 클래스와 연결 
 *                            -------------
 *         => 객체 지향 프로그램
 *           : 여러 개 클래스를 모아서 조립하는 프로그램 => 다른 클래스와 연동 
 *      기능 
 *       CPU / 하드 디스크 / 모니터 / 메모리 ==> 기능을 구현 
 *       ----------------------------
 *                    |
 *                  메인보드 
 *         => 클래스 1개 부품 => 조립 (CBD)
 *                              Component : 클래스 (한 개의 기능 => ex) 게시판..)
 *                               => 여러 개 만든다 => 조립 
 *                               => 레고 프로그램 
 *                               => 묶어주는 역할 : Container
 *     = 메소드 형식 => 140page
 *      [접근지정어] [옵션] 리턴형 메소드명 (매개변수 목록) => 선언부
 *      {              ----- 데이터형
 *        // 구현부 
 *        return 값 => 데이터형에 해당되는 값 
 *        // void (결과값이 없는 경우) => return 생략이 가능 
 *                                  ---------------
 *                                   자동으로 추가(컴파일러)
 *      }
 *      ** 접근지정어
 *      private : 자신의 클래스 안에서만 사용 가능 => 다른 클래스에서 사용 불가 => 멤버변수 (데이터 보호) 
 *                                           ----------------- 객체 지향이라 하기 어렵다 
 *      (default) : 키워드가 없는 상태 => 같은 패키지 안에서 사용 가능 
 *      protected : 같은 패키지 안 + 상속받은 다른 패키지 접근 가능 
 *      public : Open 모드 => 패키지와 관계없이 모든 클래스에서 접근 가능 
 *      *** 자바 / 오라클 => 공부 많이 
 *      *** Spring 
 *      
 *      private : 접근 거부 => 다른 클래스에서 사용이 안됨 => 개인정보 => 멤버변수
 *        => 메소드 (변수의 기능) 
 *                 --------
 *                 메모리 저장 / 메모리 값 읽기
 *                 --------  -----------
 *                  setter     getter
 *        public +  set변수명()  get변수명()
 *               => 변수는 메모리에 값이 저장 => 노출(변경,상실 방지)
 *               => 메소드는 주소값만 저장 => 노출이 안됨 
 *               -------------------------------------------- 캡슐화  
 *      public  : 접근 가능 => 다른 클래스와 연결 가능 => 생성자/클래스/메소드/인터페이스
 *      ----------------------------------
 *      
 *      접근지정어 사용방법 
 *      -------------
 *       클래스
 *       [접근지정어][옵션] class ClassName
 *       -------- publice  => 다른 클래스와 연결
 *                옵션: static/abstract/final
 *       {
 *       } 
 *       생성자 : 다른 클래스와 연결
 *       [접근지정어] 클래스명()
 *       -------- public 
 *       {
 *         => 구현
 *       }
 *       
 *       멤버변수
 *       [접근지정어][옵션] 데이터형 변수명 => 클래스, 배열
 *       -------- ---- static: 공통으로 사용하는 변수 => 메모리 공간 1개만 만든다 
 *       private : 개인정보, 회사정보 등 노출하면 안되는 정보일 때 사용 
 *       public : 라이브러리 클래스, 버튼, 테이블 ....윈도우 관련
 *       ** 일반 => 인스턴스 변수 (메모리가 따로 있다)
 *       ** 데이터묶음 => static => 데이터 관리 (회원목록/게시판목록.. 한 개만 가지고 써야하는 경우)
 *       ------------------------------------------------------------------------
 *       
 *       메서드 : 다른 클래스와 연결 
 *                        |요청결과값    | 사용자요청값 
 *       [접근지정어] [옵션] 리턴형 메소드명(매개변수 목록)
 *       --------- ----             --------- 0이상 => 매개변수 3개 이상 추가하지 않는다 => 배열, 클래스 이용 
 *        public   static
 *                 ------ 공통으로 사용 (한글변환,암호화,복호화)
 *       {
 *        	구현
 *       }
 *       
 *       => 경우의 수 
 *       -----------------------------------------
 *                      리턴형           매개변수
 *                     (요청처리값)      (사용자요청)
 *       -----------------------------------------
 *                        o              o        => String 
 *                                                   String substring(ins s,int e)
 *                                                   s부터 e까지 자른 문자열을 달라 
 *       -----------------------------------------
 *                        o              x        => String trim() => 공백 제거하고 달라
 *                                                => String toUpperCase() => 대문자 변환후 문자열 
 *       -----------------------------------------
 *                        x              o        => (void) System.out.println(String s)
 *                                                   s를 출력하라
 *                                                   => 메소드 자체 처리 => 결과값이 없다 void 
 *                                                   => 오라클에 추가,수정,삭제 
 *       -----------------------------------------
 *                        x              x        => 사용빈도가 거의 없다 
 *                                                => void System.out.println() 
 *                                                   다음 줄에 출력하라 
 *       -----------------------------------------
 *      
 *      ** 옵션 
 *     = 메소드 호출 
 *       class A 
 *       {
 *         private int a;
 *         private int b;
 *         private state int c; => 저장
 *         public void aaa(){}
 *         public static void bbb(){} => 저장
 *         public int ccc(){}
 *         public static int ddd(){} => 저장 
 *         // static => 메소드,변수는 컴파일시 저장 
 *       }
 *        *static 저장 => Method Area
 *       ---------
 *        -------
 *           0    => c   ==> A.c => 클래스명.변수
 *        -------
 *         bbb()         ==> A.bbb() => 클래스명.메서드명()
 *        -------
 *         ddd()         ==> 결과값을 받는다 
 *       ---------           int result=A.ddd()
 *                           ----       ------- 리턴형이 있는 경우 결과값 받아서 저장
 *                           | 리턴에 사용된 데이터형보다 크거나 같아야 한다 
 *        
 *       *인스턴스 저장 
 *        A aa=new A();
 *          Stack              Heap
 *         ---aa---
 *          0x100 => 메모리 주소에 있는 메소드나 변수를 가지고 온다 => . => aa. (.은 메모리 주소 접근 연산자)
 *         --------   0x100-------------
 *                            
 *                          -----------
 *                               0     ---> a ==> 객체명.변수명 => aa.a
 *                          -----------
 *                               0     ---> b ==> aa.b
 *                          -----------
 *                             aaa()          ==> 객체명.메소드명() => aa.aaa()
 *                          -----------
 *                             ccc()   => 리턴형이 있는 경우 
 *                          -----------   int result=aa.ccc()
 *                         --------------       |    --------
 *                                              |       |
 *                                              ---------
 *      * 메서드 수행
 *      -----------
 *      public int aaa() 
 *      {
 *        1. 문장
 *        2. 문장
 *        3. 문장 
 *        return 10;
 *      }
 *      
 *      int a=aaa() => 호출
 *     => 1.문장 수행
 *        2.문장 수행
 *        3.문장 수행
 *        =============> a에 10을 대입 ==> 밑에 문장 수행 
 *        호출 => 메서드에 있는 모든 문장을 수행한다 ==> 호출된 위치로 복귀 
 *        -------------------------------------------------
 *        * 메서드는 호출 할때마다 메서드를 처음부터 다시 수행한다 
 *      
 *   ----------------------------------------------------------------------
 *   => 패키지 / import
 *   => 데이터 보호 : 캡슐화
 *   => 상속 / 포함
 *   => 오버라이딩 / 오버로딩
 *    --------------------- 객체 지향 프로그램
 *    예외처리 / 클래스 종류 / 라이브러리 사용 / 구현 
 *    
 *    *** 개념 : 면접 
 *       => 1. 형식 2. 사용방식 3. 조립 => 기능 
 *                   ------ 메소드 호출 / 초기화 
 *       ------------------------------------ 요구사항 분석 => 구글링 / GPT 
 *    개념 => 자바 / Spring 
 *          --- 객체지향 프로그램 / 자료구조
 *          
 *    ** 프로그램에서는 특별한 경우가 아니면 static 메서드는 사용빈도가 거의 없다 
 *                                ------------ 데이터베이스/네트워크 프로그램 제어 
 *                                |보통 인스턴스 메서드 (웹)
 */
public class 클래스구성요소_변수 {
//	int a;
//	a=100; // 클래스 영역에서는 선언한 다음 구현 하면 오류남. 
//            선언/ 선언과 동시에 초기화만 가능하다 
//	int a;
//	{
//		a=100;
//	} // 구현하려면 초기화 블록을 이용해야 한다 
	
	
	//저장이 안된 => 인스턴스 (new를 이용해서 저장해야한다) 
	/*
	 *   인스턴스 : 객체 
	 *   ----- 클래스의 내용(메서드,변수) => 메모리에 저장한 상태 => 각자 따로 저장 => new를 이용해야 사용이 가능 
	 *   
	 *   인스턴스 : 변수 / 메서드 ********
	 *   static : 변수 / 메서드 
	 *   
	 *   class A{ // static이 안붙으면 따로 저장 
	 *      private int a=10; => 객체 자신이 가지고 있는 변수 
	 *      private static int b=20;  => 객체마다 공통으로 사용되는 변수 
	 *      
	 *      public void aaa(){ => 객체 자신이 가지고 있는 메서드
	 *         => ccc() / a / b 사용이 가능  
	 *      }
	 *      public static void bbb(){ => 객체마다 공통으로 사용되는 메서드 
	 *         => b만 사용이 가능 => static에서는 static으로 선언된 변수,메서드만 쓸 수 있다
	 *         ex) 만약 aaa(), bbb(),a 사용하고 싶다면
	 *             A aa=new A(); => 객체 선언 후 사용해야 한다 
	 *             aa.aaa()
	 *             aa.bbb()
	 *             aa.a 
	 *      }
	 *      public void ccc(){ => 객체 자신이 가지고 있는 메서드 
	 *         => aaa() / a/ b 사용이 가능 
	 *      }
	 *   }
	 *    인스턴스 메서드는 클래스에 있는 모든 데이터/메서드 사용이 가능하다 
	 *    
	 *    메서드는 호출이 되면 => return이 있는 곳까지 수행 
	 */
	public void aaa() {
		System.out.println("aaa() 진입..."); //1
		bbb();
		System.out.println("aaa() 종료..."); //6
		// void는 return 생략 => 자동추가 
	}
	public void bbb() {
		System.out.println("bbb() 진입..."); //2
		ccc();
		System.out.println("bbb() 종료..."); //5
		// return 
	}
	public void ccc() {
		System.out.println("ccc() 진입..."); //3
		System.out.println("ccc() 종료..."); //4
	}
	public static void main(String[] args) {
//		bbb(); // 오류난다 static 은 static만 가능
//      static이라 부를 수 없기 때문에 객체를 생성하고 불러줘야 한다
		클래스구성요소_변수 aa=new 클래스구성요소_변수();
		aa.aaa();
	}

}
