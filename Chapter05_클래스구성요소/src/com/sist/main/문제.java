package com.sist.main;
/*
 *   1. 객체와 클래스에 대한 설명으로 틀린 것은 무엇입니까?
1) 클래스는 객체를 생성하기 위한 설계도(청사진)와 같은 것이다.
2) new 연산자로 클래스의 생성자를 호출함으로써 객체가 생성된다.
3) 하나의 클래스로 하나의 객체만 생성할 수 있다.
4) 객체는 클래스의 인스턴스이다.


2. 클래스의 구성 멤버가 아닌 것은 무엇입니까?
1) 필드(field)
2) 생성자(constructor)
3) 메소드(method)
4) 로컬 변수(local variable)

3. 필드, 생성자, 메소드에 대한 설명으로 틀린 것은 무엇입니까?
1) 필드는 객체의 데이터를 저장한다.
2) 생성자는 객체의 초기화를 담당하낟.
3) 메소드는 객체의 동작 부분으로, 실행 코드를 가지고 있는 블록이다.
4) 클래스는 반드시 필드와 메소드를 가져야 한다.

4. 필드에 대한 설명으로 틀린 것은 무엇입니까?
1) 필드는 메소드에서 사용할 수 있다.
2) 인스턴스 필드 초기화는 생성자에서 할 수 있다.
3) 필드는 반드시 생성자 선언 전에 선언되어야 한다.
4) 필드는 초기값을 주지 않더라고 기본값으로 자동 초기화된다.

5. 생성자에 대한 설명으로 틀린 것은 무엇입니까?
1) 객체를 생성하려면 생성자 호출이 반드시 필요한 것은 아니다.
2) 생성자는 다른 생성자를 호출하기 위해 this()를 사용할 수 있다.
3) 생성자가 선언되지 않으면 컴파일러가 기본 생성자를 추가한다.
4) 외부에서 객체를 생성할 수 없도록 생성자에 private 접근 제한자를 붙일 수 있다.




6. 메소드에 대한 설명으로 틀린 것은 무엇입니까?
1) 리턴값이 없는 메소드는 리턴 타입을 void로 해야 한다.
2) 리턴 타입이 있는 메소드는 리턴값을 지정하기 위해 반드시 return문이 있어야 한다.
3) 매개값의 수를 모를 경우 "..."를 이용해서 매개 변수를 선언할 수 있다.
4) 메소드의 이름은 중복해서 선언할 수 없다.

7. 메소드 오버로딩에 대한 설명으로 틀린 것은 무엇입니까?
1) 동일한 이름의 메소드를 여러 개 선언하는 것을 말한다.
2) 반드시 리턴 타입이 달라야 한다.
3) 매개 변수의 타입, 수 순서를 다르게 선언해야 한다.
4) 매개값의 타입 및 수에 따라 호출될 메소드가 선택된다.


8. 인스턴스 멤버와 정적 멤버에 대한 설명으로 틀린 것은 무엇입니까?
1) 정적 멤버는 static으로 선언된 필드와 메소드를 말한다.
2) 인스턴스 필드는 생성자 및 정적 블록에서 초기화될 수 있다.
3) 정적 필드와 정적 메소드는 객체 생성 없이 클래스를 통해 접근할 수 있다.
4) 인스턴스 필드와 메소드는 객체를 생성하고 사용해야 한다.

9. final 필드와 상수(static final)에 대한 설명으로 틀린 것은 무엇입니까?
1) final 필드와 상수는 초기값이 저장되면 값을 변경할 수 없다.
2) final 필드와 상수는 생성자에서 초기화될 수 있다.
3) 상수의 이름은 대문자로 작성하는 것이 관례이다.
4) 상수는 객체 생성 없이 클래스를 통해 사용할 수 있다.



10. 다음 클래스에서 해당 멤버가 필드, 생성자, 메소드 중 어떤 것인지 빈칸을 채우세요.
	public class Member {
    private String name; // -------------------------------------(  (1)  )  
 
    public Member(String name) { } // ---------------------------(  (2)  )
    
    public void setName(String name) { } // ---------------------(  (3)  )
   }

11. 현실 세계의 회원을 Member 클래스로 모델링하려고 합니다. 회원의 데이터로는 이름, 아이디, 패스워드, 나이가 있습니다. 이 데이터들을 가지는 Member 클래스를 선언해보세요.
 데이터 이름	 필드 이름 	 타입 
 이름 	 name 	 문자열 
 아이디	 id	 문자열 
 패스워드	 password	 문자열 
 나이	 age	 정수 


12. 위에서 작성한 Member 클래스에 생성자를 추가하려고 합니다. 다음과 같이 Member 객체를 생성할 때 name 필드와 id 필드를 외부에서 받은 값으로 초기화하려면 생성자를 어떻게 선언해야 합니까?


	캡슐화로 만든다
 


 

	다음의 코드에 정의된 변수들을 종류별로 구분해서 적으시오.
class PlayingCard { 
int kind; 
int num; 
static int width; 
static int height; 
PlayingCard(int k, int n) { 
kind = k; 
num = n; 

} 
인스턴스변수 :
정적변수(공유변수) :
지역변수 :


 다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) 
a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
 b. 생성자는 객체를 생성하기 위한 것이다.
 c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
 d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.
 e. 생성자는 오버로딩 할 수 없다.

 다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참고할 수 있다.
b. 지역변수는 사용하기 전에 반드시 초기화해야 한다.
c. 초기화 블럭보다 생성자가 먼저 수행된다.
d. 명시적 초기화를 제일 우선적으로 고려해야 한다.
e. 클래스변수보다 인스턴스변수가 먼저 초기화된다.



 다음 중 인스턴스변수의 초기화 순서가 올바른 것은?
a. 기본값-명시적초기화-초기화블럭-생성자
b. 기본값-명시적초기화-생성자-초기화블럭
c. 기본값-초기화블럭-명시적초기화-생성자
d. 기본값-초기화블럭-생성자-명시적초기화
 다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. 자동 초기화되므로 별도의 초기화가 필요없다.
b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
c. 메서드의 매개변수로 선언된 변수도 지역변수이다.
d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
e. 힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다.

 다음 중 접근제어자를 접근범위가 넓은 것에서 좁은 것의 순으로 바르게 나열한 것은?
a. public-protected-(default)-private
b. public-(default)-protected-private
c. (default)-public-protected-private
d. private-protected-(default)-public
접근 제어자가 사용될 수 있는 곳 - 클래스, 멤버변수, 메서드, 생성자
(     ) - 같은 클래스 내에서만 접근이 가능하다.
(     ) - 같은 패키지 내에서만 접근이 가능하다.
(     ) - 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
(     ) - 접근 제한이 전혀 없다.

 다음 중 접근 제어자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)
a. public은 접근제한이 전혀 없는 접근 제어자이다.
b. (default)가 붙으면, 같은 패키지 내에서만 접근이 가능하다.
c. 지역변수에도 접근 제어자를 사용할 수 있다.
d. protected가 붙으면, 같은 패키지 내에서도 접근이 가능하다.
e. protected가 붙으면, 다른 패키지의 자손 클래스에서 접근이 가능하다.

 */
public class 문제 {
 
}