package com.sist.main;
/*
 *	일반 클래스
 *   = 구성 요소 
 *     class ClassName {
 *      -------------------------------------------------------------
 *       변수 
 *        => 따로 저장된 변수 : 인스턴스 => 새로운 메모리 공간을 만들어서 저장 
 *                                  ------------ new
 *        => 한 개를 가지고 사용하는 변수 => static 
 *      -------------------------------------------------------------
 *       생성자 : 변수에 대한 초기화 
 *             => 윈도우 / 웹 / 데이터베이스 : 시작과 동시에 처리 
 *                화면 UI / 자동 로그인, 쿠키 / 드라이버 등록 
 *             => 반드시 필요하다 : 메모리 저장시에 호출 
 *                ---------- 없는 경우에는 컴파일러에 의해 자동 추가
 *                필요 없는 경우엔 생략이 가능 
 *             => 여러 개 만들 수 있다
 *              => 디폴트 생성자 : 매개변수가 없는 생성자 
 *              => 매개변수가 없는 생성자 => 사용자로부터 초기값을 받아 저장
 *              => 클래스 내에서 생성자를 호출할 때는 this()를 이용한다 
 *                 this() : 생성자 내에서만 한번만 호출 가능 (첫 줄에 와야한다)
 *                 super()는 상속을 받은 경우에만 사용 
 *             => 자동처리 => 컴파일러에 처리
 *              1. 모든 클래스는  Object 상속을 받는다 => Object 상속은 생략할 수 있다
 *                => Object에서 제공하는 모든 기능을 사용 가능 
 *                 : 객체 비교 = equals()
 *                 : 소멸자 = finalize()
 *                 : 복제 = clone()
 *                 : 주소 출력 = toString()
 *              2. import가 생략 
 *               => import java.lang.*;
 *                         ---------- String, Math, System ...
 *              3. 메소드
 *               void => return을 생략하면 자동으로 추가
 *              4. 상속 
 *               class A{
 *               }
 *               class B extends A{
 *                 public B(){
 *                  -----생략 super()
 *                  ---- 생략할 수 없는 내용 
 *                      => 상속을 내리는 클래스의 생성자가 매개변수를 갖고 있는 경우 
 *                 }
 *               }
 *               ==> super() (상위 클래스의 메모리 할당) => 자신의 메모리 할당 
 *                   -------------------
 *                    -----super------
 *                     상속받은 변수/메소드
 *                    ----------------
 *                    ------this------
 *                     추가된 변수/메소드
 *                    ----------------
 *                   ------------------- => this,super에 있는 변수,메소드 사용 가능
 *              5. 예외처리가 생략 => 자바의 모든 클래스는 예외처리를 가지고 있다
 *                 ----- 
 *                  | 에러 방지 => 에러 (소스상에서 수정할 수 없는 에러) / 예외처리 (소스상에서 수정이 가능한 에러)
 *                              메모리 할당할 공간이 없습니다           정수 => 문자열 
 *                  ---------------------------------------------------------------------- 
 *                 컴파일시 처리, 실행시 처리 (생략 가능) 
 *                 ---------  --------
 *                 javac      java  
 *                            | 사용자의 입력 받아 처리 
 *                 | 파일 입출력, 네트워크, 쓰레드, 데이터베이스, 웹 ... 
 *      -------------------------------------------------------------
 *                => 기능 처리 (사용자 요청 처리) => 메소드
 *                   => 요청은 한 개만 요청이 가능하게 만든다
 *                   => 메소드는 반드시 한 개 요청에 대한 처리만 한다
 *                    예) 로그인, 댓글 
 *     }
 *	추상 클래스 : 사용자 정의는 거의 없다 => 확장된 개념 (인터페이스)
 *			   => 라이브러리에 추상 클래스가 많이 존재 
 * 	              ------- 상속 => 왜 오버라이딩을 하는지 
 *                        ----------------------
 *                        메모리 할당을 할 수 없다 => 미완성 클래스 => 메소드 구현이 안된 경우 
 *             => 형식 : 구현이 안 된 메소드를 포함 => 미완성된 클래스
 *                      ------------------ 설계만 한다 => 상속을 내려서 사용
 *                                                  => 익명의 클래스를 이용한다 
 *                    [접근지정어] abstract class ClassName{
 *                     
 *                      ---------------------------------------------------------
 *                       변수는 일반 클래스와 동일 
 *                      ---------------------------------------------------------
 *                       생성자 일반 클래스와 동일
 *                      ---------------------------------------------------------
 *                       구현된 메소드 : 상속받은 클래스가 동일한 기능을 수행
 *                      ---------------------------------------------------------
 *                       구현이 안된 메소드 : 상속받은 클래스마다 기능은 동일한데 구현이 다른 경우 => 선언
 *                      ------------- 추상 메소드
 *                       [접근지정어] abstract 리턴형 메소드명 (매개변수 ...); 
 *                        => 프로그램에 맞게 구현을 해서 사용한다 
 *                      --------------------------------------------
 *                     }
 *                     
 *                     => 주로 사용되는 곳은 모든 클래스마다 기능은 동일한데 구현내용이 다른 경우 유지보수 편리하게
 *                     => 사이트마다 약간씩 틀리기때문에 추상 메소드 활용 
 *                     => 상속이 안되는 소스
 *                        : 생성자, static, 초기화 블록 => 상속 (변수, 메소드)
 *                     => 오버라이딩 프로그램
 *                        : 일반 클래스, 추상 클래스, 인터페이스
 *                        => 메소드명, 매개변수, 리턴형 동일, 접근지정어는 같거나 확장만 가능    
 * 
 *                        
 */
class A {
	// public A(){} 생략 
}
class B extends A{
	public B() {
		super(); // 생략 
	}
}
class C {
	public C (int a) {
		//super는 Object, 상속을 받고 있기 때문 
	}
}
// D: 하위 클래스 => this,supper , C: 상위 클래스 => this,super
// 상속을 받아 확장된 새로운 클래스를 만들어서 사용 
class D extends C{
	public D() {
		super(10); 
		// 상위 클래스가 매개변수가 있는 경우에는 반드시 supper를 이용해서 호출해야 사용이 가능
		// super(), this() => 생성자내에서 호출이 가능, 반드시 첫 줄에서 호출한다 
		// 둘 중에 한 개만 호출이 가능하다 
		// 상위 클래스 제어 => supper, 생성자 supper()
		// 자신 클래스 제어 => this, 생성자 this()
	}
}
abstract class AAA{
	public abstract void display();
	
}
public class 추상클래스_01 {

	public static void main(String[] args) {
		//return;

	}
}
