/*
 *	1. 자바언어는 클래스로 시작 클래스로 종료
 *	2. public static void main(String[] args) main => 프로그램의 시작점
 *	   main이 없는 경우에는 프로그램이 실행이 안된다 
 *	   => 실행시에 main을 찾는다
 *	3. 구조
 *	   public class className
 *	   {
 *			public static void main(String[] args)
 *			{			
 *				// 소스 코딩 => 문법 => 예외처리 (8장)
 *		    }
 *	   }
 *	*기본적인 자바 용어
 *	1. 자바 => .java : 원시소스 (프로그래머만 알 수 있는 소스)
 *		 	  ---------컴퓨터가 알 수 있게 변경(번역) => 0,1
 *			  ---------컴퓨터가 알 수 있는 언어 => .class (바이트 코드)
 *					   -------------------컴파일 (0,1로 변경=> 기계어 변환)
 *	   자바 실행
 *	   -------
 *     코드 작성
 *     	            기계어 변경(컴파일)            자바실행환경(JDK=>JVM)
 *           A.java ------------------A.class---------------------번역된 소스를 한 줄씩 읽어서 출력
 *     			          javac                     java                    |
 *         	    |                        | => 배포                         인터프리터
 *                                     AWS => 전체 파일을 모아서 (.war)
 *    프로그래머만 알 수 있는 언어     컴퓨터가 알 수 있는 언어
 *  
 *    컴파일 방식    : 기계어로 변경 => 자바/C/C++/C#
 *    인터프리터 방식 : HTML,CSS
 *    
 *    ** 자바  ==> SW => 고급언어
 *    ** C/C++ => HW => 저급언어
 *    B ----> C ----> C++---------------> Java(기반 C/C++)
 *    				  C with class               |
 *                    재사용(객체지향언어)    C/C++의 어려운 부분을 제외
 *                                       구조체 / 포인터 => 주소개념이 없다
 *    ** C/C++
 *                 컴파일                구동              
 *       .c/cpp--------------> .obj -------------> .exe
 *       ** 자바언어 => .exe를 만들지 못한다 (단점)
 *         => 브라우저, 핸드폰 ==> 웹,앱 ==> 안드로이드 (SDK,NDK)
 *                             ---- 웹 프로그래머 채용
 *                             		---------------언어 
 *                                        |
 *                                     JSP => Java 
 *                                     공기업/금융권/대기업
 *                                     ASP => C#
 *                                     학교
 *                                     PHP => Script
 *                                     일반 사이트                      
 *                                     -------------
 *    *자바언어의 특징
 *    ------------
 *    1. 객체 지향 프로그램 
 *       --------유지보수 : 수정, 추가, 재사용, 데이처 보호 
 *                        -------  -----  --------
 *                                           | 캡슐화 (은닉화)
 *                                  | 상속 => 확장
 *                                   exrends JFrame
 *                        |다형성 (**오버라이딩(modify),오버로딩(new)
 *    2. 자바 가상머신 (JDM) : 모든 운영체제에서 호환이 가능
 *      ** MS (windows에서만 실행) => window < Linux
 *      ** 차세대 운영체제 (우분투)
 *       사용자
 *         |
 *        JVM--> 운영체제 연결 => API => write ONE 
 *         |--> 메모리 구조 (변수...)
 *       운영체제
 *         |
 *       하드웨어
 *       
 *       ** 메모리 구조
 *       ------------------------------
 *       	 Method 영역 / static 변수
 *       ------------------------------
 *           Stack : 메모리 자체 관리
 *                   지역변수 / 매개변수
 *        *지역변수: {}을 벗어나면 사라지는 변수 
 *        | 단점은 반드시 초기화를 한 다음에 사용
 *       ------------------------------
 *       	 프로그래머가 관리하는 영역 
 *           Heap : 멤버변수, 클래스, 배열
 *       ------------------------------
 *    *멀티쓰레드를 이용한다 (main=>쓰레드)
 *    ----------한개 실행파일에서 여러개의 기능을 동시에 수행 
 *             => 게임 (아바타 , 비행기)
 *    ----------------------------------------------
 *     1. 주석 : 프로그램과 상관없이 코드에 설명을 붙여준다
 *     	  여러줄 / 한줄 // 
 *     2. 변수 : 메모리에 저장 => 한 개의 데이터만 저장이 가능 
 *     3. 메소드 : 사용자가 요청시에 처리하는 기능 
 *               ----------- 기능을 분리하는 역할, 다른 클래스와 연결
 *     4. 예약어 : 이미 자바에서 사용중인 단어 (int,double ...)
 *     5. 초기화 : 데이터를 저장할때 => 처음으로 부여하는 값 
 *     6. 상수 : 고정된 값 -> 변경할 수 없다 final 
 *     --------------------------------------------1장
 *     
 *     1. 프로그램 
 *        데이터를 저장 => 데이터 처리 => 처리 결과 출력 
 *        ---------     -------    ------------
 *                      사용자 요청시 처리 => 웹, 도스창, 윈도우창, 핸드폰
 *                      연산자/제어문
 *        1) 한개 (변경) => 변수
 *        2) 한개 (변경없이) => 상수
 *        3) 여러개 (배열,클래스)
 *     -------------------------단점 (프로그램 종료시에 자동삭제) => 메모리
 *        4) 영구적인 저장장친 )
 *           => File / RDBMS
 *    2. 변수 / 상수
 *    	  변수=> 한 개의 데이터를 저장하는 메모리 공간의 별칭 => 변경해서 사용
 *              데이터형 변수명;
 *        상수=> 한 개의 데이터를 저장하는 메모리 공간의 별칭 => 고정해서 사용 
 				final 데이터형 변수명;
      => 변수 명칭법 (메소드,클래스,인터페이스,배열,메소드명)
       1) 알파벳이나 한글로 시작한다 (단 알파벳사용시에는 대소문자 구분)
       2) 숫자 사용이 가능 (앞에 사용 금지)
       3) 공백이 있으면 안된다 
       4) 예약어(키워드)는 사용할 수 없다
       5) 특수문자 사용 (_,$) => 위치는 관계없다 
      => 메모리 공간의 크기 => 데이터형 / 자료형 / 기본형
        ---------------
        정수
          byte => 1byte(8bit) => 0,1이 8개만 사용이 가능
                  저장할 수 있는 값 => -128~127까지만 사용이 가능
                                  이상 초과하면 오버플로우 => 오류발생
          int => 4byte(32bit) => 0,1이 32개만 사용이 가능
          		  저장할 수 있는 값 => -21억 4천~ 21억 4천
          		  컴퓨터가 인식하는 숫자의 기본 => default(모든 숫자는 int를 인식) 
          long => 8byte(64bit) => 0,1이 64개만 사용이 가능
          	      수 표현이 많이 있다 (금융권, 공기업)
        실수
          double => 8byte => 소수점 15개이상
          			실수형의 deafalt => 컴퓨터에서 사용하는 모든 실수 => double
        문자
          char => 2byte => 0~65536 사용이 가능 => 각그국의 언어 사용이 가능
           					                   --------------------
           					                   	Unicode, 영문, 숫자 => ASC
        논리
          boolean => 1byte /=> true/false
       => 초기화
          byte b=100;
          int i=1oo;
          long l=q1=100L; // L은 long형 값이다
          char c='문자1개' => 'A' => '' 오류발생 => ' ' (공백이라도 주어야 한다)
          boolean b=true/false
          => 메모리에 저장한 후에 필요시에는 변경해서 사용이 가능
          => 변수기가 없는 경우에는 데이터값을 처리할 수 없다
          => 프로그램은 변수가 없는 프로그램이 존재  
          --------------------한 개 이상의 변수는 존재한다
                                  ---한 개의 프로그램안에서 임시로 저장 후 사용 
 */
import java.util.Scanner;
//정수값을 받아서 저장후에 출력
/*
 * 	초기화
 * 	1) 명시적인 초기화 => int a=30
 * 	2) 난수 (임의로 추출) => int a=(int)(Math.random().100)+1
 *  3) 사용자로부터 값을 받아서 초기화 (*****)
 *  	int i=scan.nextInt()
 */
public class 자바실행_구조 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan=new Scanner(System.in);
		System.out.print("정수 입력:");
		int num=scan.nextInt();
		System.out.println("입력을 받아서 초기화된 정수값:"+num);
		
		System.out.print("실수 입력:");
		double d=scan.nextDouble();
		System.out.println("입력 받은 실수값:"+d);
		
		System.out.println("논리 입력:");
		boolean b=scan.nextBoolean();
		System.out.println("입력 받은 논리값:"+b);
		
		System.out.print("문자 입력:");
		char c=scan.next().charAt(0);
		System.out.println("입력받은 문자:"+c);

	}

}
