package com.sist.chapter05;
/*
 *	변수 : 한 개 저장 메모리 공간 
 *   = 데이터형
 *       정수 : int, long, 배열(byte) => 네트워크 전송, 파일읽기
 *       실수 : double
 *       논리형 : boolean
 *       문자열 : String 
 *       ----------------- 필요한 데이터 조합 
 *   = 배열 => 같은 데이터형의 변수 여러 개를 한번에 저장 (이름이 한 개) => 인덱스 (0..)
 *       단점) 같은 데이터형만 모아서 관리할 수 있다 / 저장 개수를 지정해야만 함 (고정)
 *   = 클래스 => 다른 데이터형을 저장할 수 있다
 *             저장 개수를 지정할 필요가 없다 
 *             필요한 개수만큼 new를 사용하면 된다 (따로 저장)
 *             한 개에 대한 정보 
 *             ---- => new => 메모리에 저장
 *             영화 정보 / 뮤직 정보 ...
 *  --------------------------------------------------------------------
 *   연산처리 / 제어문
 *   ------------- 메소드 (기능 처리)
 *   프로그램은 묶음 => 다음 다시 활용 (재사용)
 *    => 변수 : 배열 / 클래스
 *    => 연산 / 제어문 => 명령문 => 메소드
 *    => 변수 => 초기화 (생성자)
 *    
 *    클래스 구성 요소
 *    1. 변수 (멤버변수)
 *    -----------------------
 *    2. 메서드 => 변수에 대한 활용
 *    3. 생성자 => 변수에 초기화 
 *    -----------------------
 *    
 *    클래스는 한 가지 기능 => 프로그램에서는 여러 기능이 필요
 *     => 클래스 여러 개를 만든다 
 *        ---------- 연결 -> 접근 범위 지정 (접근지정어)
 *    ----------------------------------------------
 *    재사용 기법 
 *    -------- 
 *       = 상속 (변경해서 사용)
 *       class A
 *       class B extends A => is-a
 *               -------
 *       class C
 *       {
 *          A a=new A(); => has-a
 *       }
 *       = 포함 ( 있는 그대로 ) 
 *       
 *       = 필요시에는 변경 / 새로운 기능 추가 => 유지보수
 *         오버라이딩       오버로딩
 *       ------------------------------------- 객체지향의 3대 특성
 *       1. 캡슐화 : 데이터 보호
 *       2. 상속/포함 : 재사용
 *       3. 다형성 : 오버라이딩 / 오버로딩
 *                --------  -------
 *                |수정      | 새로운 기능
 *                 modify     new
 *       4. 추상화 : 사물을 단순화 => 클래스의 기본 
 *          사원 
 *           = 사번, 이름, 부서 
 *          학번
 *           = 학번, 이름, 학교 
 *          계산기
 *           = 정수/정수, 연산자
 *             ------- 문자열
 *      ------------------------------- 클래스의 종류
 *      일반 클래스
 *      추상 클래스 / 인터페이스 : 미완성 => 개발자가 완성해서 사용
 *      ----------------- 메소드 미구현 => 프로그램에 맞게 구현해서 사용해야 한다 
 *      -----------------------------프로그램의 안전성 => 종료하지 않는 프로그램 => 예외처리 8장 
 *      라이브러리 => 조립 => 인기
 *      Math => random() ceil()
 *      => Class => 3~4
 *      => Collection
 *      --------------------------------
 *      
 *      세부적
 *        클래스 :
 *          변수 => 인스턴스,static,지역
 *          메서드 => 인스턴스,static,선언만 하는 메서드
 *          생성자 => 생성자, 초기화 블록 => 동시에 사용하지는 않는다
 *          접근지정어 => private/public
 *                       변수    나머지
 *       
 *       클래스 구성요소 : 무조건 다 사용하는 것은 아니다 
 *       ---------- 필요한 것만 사용한다 
 *       
 *       ** 순서는 상관없다
 *          권장사항 
 *           => 변수
 *           => 생성자
 *           => 메서드
 *           
 *       class ClassName
 *       {
 *          ------------- 변수 선언 ---------------
 *          [접근지정어][옵션] 데이터형 변수명 => 노출 방지
 *          ---------
 *          private
 *          옵션
 *          static : 공통적인
 *          final : 마지막(상수)
 *          abstract : 추상적인 => 값이 결정되지 않은, 구현이 안된 (메서드에서만 사용)
 *          synchronized : 동기적인 (메서드에서 사용)
 *          
 *          인스턴스 변수
 *          정적변수 (static) => 공통으로 사용되는 변수 => Mathod Area => 메모리 공간을 1개만 사용 
 *                            전체 데이터 목록                       ------------------
 *                            학교명/ 학원명/ 사이트명 
 *          *** 대부분은 인스턴스 변수를 사용한다 
 *          *** 사용할 수 있는 변수 
 *              = 기본형
 *              = 배열
 *              = 클래스 안에서는 변수가 없는 경우도 있다 (필요한 경우에만 사용)
 *          *** 변수 => 저장할 때 반드시 값을 필요로 한다 
 *                    --------------- 초기값 
 *           클래스 영역에 설정되는 변수는 자동 초기값을 갖고 있다 
 *           --------------------------------------
 *           int=0; long=0L, double=0.0; boolean=false; String(킅래스) = null
 *           => 프로그램에 따라서 => 다른 포기값이 필요할 수도 있다
 *           => int a=100 => 명시적인 초기화
 *           => int a=난수발생, 파일읽기, 사용자의 입력값
 *                    -------------------------
 *                    클래스 블록에서는 사용이 불가능 (선언만 가능 => 구현이 불가)
 *          ------------ 생성자 선언 ----------
 *          => 명시적인 초기화가 안되는 경우 => 구현해서 값을 가지고 오는 경우
 *          => 멤버변수의 초기화
 *          => 시작과 동시에 처리하는 명령문이 존재할 때
 *             화면 UI / 자동 로그인 / 서버에 연결 / 서버 가동 / 데이터베이스 연동
 *          => 없는 경우에는 생략할 수 있다 : 프로그램 구동시에는 반드시 생성자가 필요하다 
 *                                    -------------------------------
 *                                    => 컴파일러에 의해 자동 추가 (디폴트 생성자)
 *                                                          ----------- 매개변수가 없는 생성자
 *          => 특징 
 *             = 클래스명과 동일
 *             = 리턴형이 없다 
 *             = 객체 생성시에 호출 => new를 반드시 동반한다 
 *             = 여러 개의 생성자를 만들 수 있다 
 *               -----------
 *               같은 이름의 메서드 제작 => "오버로딩"
 *               => 중복 함수 정의 
 *               => 구분 / 매개변수로 구분한다 !! 
 *                        -----
 *                        1. 개수가 다르다 
 *                        2. 데이터형이 다르다 
 *                        ---------------- > JVM이 알아서 찾아준다 
 *               => 접근지정어/ 리턴형은 관계없다 
 *               class A
 *               {
 *                 A(){}
 *                 A(){}
 *                 A(){}
 *                 A(){}
 *                 A(){}
 *               }
 *                
 *                new A(); <= 데이터형이 다르면 이게 어떤 생성자를 가리키는지 찾을 수 있다 
 *           => 오버로딩
 *             1. void display(int a, char c, double d)
 *             2. void display(int a, double d, int b)
 *             3. void display(double a, double b, double c)
 *             4. void display(char a, int d, int b)
 *             
 *             display(10.5,'A',10) => 같은 것이 없다 => 가장 근사치(가장 값이 큰 것)를 찾는다 => 따라서 4번 호출 
 *          ------------ 메서드 선언 ----------
 *          = 인스턴스 메서드
 *          public 리턴형 메서드명(매개변수 목록) => 객체명.메소드명
 *          {
 *          }
 *          =정적 메서드
 *          public static 리턴형 메서드명 (매개변수 목록) => 클래스명.메서드명
 *          {
 *          }
 *          =추상 메서드
 *          public 리턴형 메서드명(매개변수 목록); => 호출이 불가능 => 구현 후에 사용
 *          
 *           = 기능 구현 => 사용 입력을 받는 경우 : 매개변수, 요청 처리에 대한 결과 : 리턴형
 *                                                                  ------ void
 *             => 입력값
 *             => 요청처리
 *             => 결과값
 *         --------------------------------------------------- 메서드는 기능별로 만든다 
 *         
 *         접근지정어 
 *         -------private / public
 *                멤버변수     생성자, 클래스, 메서드 
 *    
 *             
 */
public class 클래스_01 {
	void display(double d) {
		System.out.println("display call..");
	}
	public static void main(String[] args) {
		클래스_01 a=new 클래스_01();
		     // - ------------- 동일
		a.display(100);
		new 클래스_01().display(100); // 다른 주소값 
		new 클래스_01().display('A');
		
		int aa=10;
		System.out.println(aa);
		System.out.println(10);
	}

}
