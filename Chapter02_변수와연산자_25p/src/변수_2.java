/*
 * 1. 변수 선언 방식
 *    1) 변수 : 한개의 데이터를 저장하는 메모리 공간의 이름
 *                               ---------주소 => 저장한 데이터를 읽기/쓰기
 *            => 데이터 변경이 가능
 *            
 *    2) 상수 : 한개의 데이터를 저장하는 메모리 공간의 이름
 *            => 데이터 변경이 불가능
 *            => 변수와 상수의 구분은 final로 함 , 붙으면 상수 
 *               
 *                 변수                                상수
 *           데이터형 변수명=값 (변경o)     final 데이터형 상수명=값 => 값을 고정 (변경 x)        
 *            
 *    3) 리터럴 : 실제 저장된 값(메모리)
 *    
 * 2. 변수 명칭법 => 식별자 => 같은 곳에서 같은 이름의 변수는 설정할 수 없음
 *   => 알파벳 , 한글로 시작
 *   (대소문자 구분)
 *   => 숫자 사용 (뒤에 사용이 가능, 앞엔 올 수x)
 *   => 키워드는 사용할 수 없다
 *     ex) int, byte같은 보라색 글씨 
 *   => 공백이 있으면 안된다
 *   => 특수 문자 사용이 가능 (_,$만 가능)
 *   ex) _ 언더바가 앞에 있으면 임시 변수 설정할 때 주로 쓴다 _temp (정렬)
 *   
 *   @@@@ 이러한 식별자 규칙 따르는 경우/ 클래스, 변수, 상수, 메소드, 인터페이스, 추상클래스, 배열....;
 *   
 * 3. 데이터형(데이터타입), 기본형  ==> 27page
 *    형식)
 *      데이터타입    변수명;
 *      -------정수,실수,문자,논리
 *      --------------------------------------------
 *      정수형 
 *       byte => 1byte (사용하는 범위 : -128~127)
 *               사용처 : 파일 읽기 , 업로드 , 다운로드 , 네트워크 통신  
 *       int  => 가장 많이 사용하는 정수형 (디폴트)
 *               사용처 : 모든 프로그램의 정수형이 필요한 경우
 *               => 4byte(사용범위 : -21억 4천~ 21억 4천)
 *       long => 데이터 수집 => 라이브러리가 제작 
 *               ex) 영화 댓글 , 금융권 / 증권
 *               8byte ==> 2^63
 *        bit                      > byte
 *       =>0이나 1만 저장하는 공간 8bit => 1byte 
 *       ---------------------------------- 음수/양수
 *       |음/양|   |   |   |   |   |   |   |
 *       -----------------------------------
 *       1로 시작하면 음수, 0으로 시작하면 양수
 *       ex ) 11111111 >음수 -128
 *            01111111 >양수  127
 *      ----------------------------------------------------------
 *      논리형 : boolean => true(1) / false(0)
 *             조건이 있는 경우 주로 사용
 *             => 로그인 , 검색어 , 페이지 나누기 등
 *             boolean => 변수 설정
 *                        bLogin
 *                        bCheck...
 *       // b자가 들어가면 T/F 논리형이구나 
 *            사용법 
 *            =>boolean bCheck=false
 *      ----------------------------------------------------------
 *      문자형 : char => 2byte (0~65535)
 *            문자는 양수로만 되어 있다
 *            => 표현하는 문자가 많이 있다
 *            => Unicode : 각국의 언어를 사용할 수 있다
 *            => char는 문자 한개만 저장이 가능 => '  ' (문자)
 *               여러개 저장 하려면 "  "  (문자열) , char배열 => String
 *            => char는 저장시에 해당 번호로 변경해서 저장
 *              ex) 'A' ==> 65
 *                  'a' ==> 97
 *                  '0' ==> 48
 *             아스키ASC코드 라고 함 
 *            => char fname='홍';
 *               char alpha='A';
 *            => char는 연산시에 정수형으로 변경된다
 *            ex) 'A'+ 1 => 66 (산수 연산)
 *                "A"+ 1 => "A1" (문자열 결합)
 *                
 *                7+"7"+7+7
 *                ==>"7777" (문자열 결합)
 *                7+7+"7"+7
 *                ==>"1477"
 *       *** 정수 표현법
 *         10   ===> 10진법
 *         010   ==> 8진법
 *         0x11  ==> 16진법
 *         0b1000 => 2진법
 *      ----------------------------------------------------------
 *      실수형 : 소수점
 *            float => 4byte => 소수점 6자리
 *            double => 8byte => 소수점 15자리
 *           *double이 실수형의 default => 10.5
 *            => 10.5F(f)
 *      ----------------------------------------------------------
 *      참조형 : 데이터를 여러개 한번에 저장하는 방법
 *             배열/클래스 
 *      ----------------------------------------------------------
 *      
 *      ==01111111
 *      1) Change
 *         0을 1로 1을 0으로 
 *        10000000 => 1의 보수 
 *        +      1
 *        ---------
 *        10000001 => 2의 보수
 *         
 *      
 * 4. 각 데이터형별 사용법
 * 5. 연산처리 => 제어
 */
public class 변수_2 {

	public static void main(String[] args) {
		int a=10;
		a=20; //int를 또 쓰면 안됨
		System.out.println(a);
		int kor,Kor; //대소문자 구분하여 서로 다른 변수가 될 수 있다
		System.out.println(0b1111111);//정수는 24개의 0이 생략 int 
		//모든 숫자 => int 데이터타입 지정안할시 
		System.out.println(~127);
		// 음수표시는 숫자 앞에 ~표시
		System.out.println('a'+'b');//char는 연산시에 무조건 정수형으로 처리
		System.out.println("A"+"B");
		System.out.println((int)'A');
		System.out.println('A');//그냥 문자 char처리
		System.out.println((int)'a');
		System.out.println((int)'0');
		System.out.println((int)'+'); //각 문자마다 정수값을 가지고 있음 그래서 연산할 땐 정수값을 계산해줌. 
		System.out.println('A'+'+');
				
		float f=10.5F;
		double d=10.5D; //더블은 D자 생략 가능
		

	}

}
