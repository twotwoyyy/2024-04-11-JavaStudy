package com.sist.main;
/*
 *	객체 지향 프로그램 
 *	-------------
 *	1) 데이터 보호 => 캡슐화
 *	    데이터 은닉화 / 메서드를 통해 접근이 가능 
 *      private     getter/setter
 *  2) 상속 => 기존의 클래스를 재사용
 *  	상속 / 포함
 *           | 있는 그대로 사용 ===> 사용 빈도가 많다 
 *  	| 변경해서 사용 
 *  	  = 메모리 누수 현상이 많다
 *  		상위 클래스 메모리 할당 => 하위 클래스 메모리 할당 (메모리 시용이 많다)
 *  		상위 클래스에 맞게 사용 => 제약이 많다 
 *  		결합성이 높아지는 단점 
 *  		속도가 늦다 ==> 가급적이면 상속을 사용하지 않는다 
 *  		--------------- 수정시에 다른 클래스에 영향을 많이 미친다
 *      => 윈도우 프로그램 짤 때 상속을 많이 이용   
 *      => 웹 프로그램은 상속이 거의 없다 => Spring 
 *  3) 다형성(오버로딩,오버라이딩)
 *                -------
 *                모든 내용이 동일해야 한다 (리턴형, 매개변수, 메소드명, 접근지정어)
 *            | 메서드명만 동일 
 *     ---- 여러 형태 (같은 메서드명으로 다른 기능을 제작)
 *     => 새로운 기능 추가 : 오버 로딩
 *     => 기존의 기능 변경 : 오버 라이딩
 *     => 오버로딩/오버라이딩 => 질문
 *        new   modify
 *  ---------------------------- 객체 지향의 3대 특성 (권장) => 재사용, 수정, 추가 => 유지보수
 *  
 *  1. 클래스 구성요소
 *     클래스 : 설계
 *            = 필요한 데이터 추출 => 변수
 *              -------------
 *            = 기능 추출 => 메서드
 *              ---
 *            = 필요시에는 초기화 => 생성자 (생략이 가능)
 *       | 
 *   메모리에 저장 => 인스턴스 => 'new'
 *       |  
 *      사용 => 객체 => new로부터 생성
 *            --- 관련된 데이터와 메서드를 관리하는 메모리 영역 (변수 => 데이터값을 관리)
 *                --------------------------------
 *                define은 중요하지 않는다 
 *                => 권위가 있는 사람이 이름을 부여 
 *                => 예) 
 *                      하둡 => 개발자 아들의 장난감 이름 (노란 코끼리)
 *                      클라우드 (구름) => 구글 사장 => 네트워크 
 *      class className{
 *         클래스 영역에서는 제어문, 연산처리 등 구현 x, 선언/선언과 동시에 값 대입만 가능 
 *        -------------------------------------------
 *         변수
 *          = 인스턴스 변수 (중심) ===> 멤버변수 ==> Heap
 *            --------- 메모리 영역을 만들어서 저장
 *                      ------------------- new
 *                      => 따로 저장하는 메모리 공간을 만들다 
 *                      => 클래스는 1개 정보 설정
 *                         학생 => 1명의 정보를 추출 => 여러 명 => new
 *                      => 클래스명 객체명=new 생성자()
 *                         접근: 객체명. 변수명 
 *                              ----------
 *          = static 변수 ==> 공통 변수 ==> Method Area => 메모리 1개만 생성
 *            ---------- 컴파일러에 의해 생성
 *            ---------- 접근자에는 클래스명.변수명
 *        -------------------------------------------
 *         메서드 : 변수 활용 
 *                -------
 *                지니뮤직 
 *                => 목록 출력 
 *                => 상세보기 
 *                => 동영상 
 *                => 음반 판매 
 *        -------------------------------------------
 *         초기화 => 데이터베이스/파일/크롤링은 초기화 필요 x 
 *                 ------------------
 *                 => 생성자 *** 생략이 가능 => 자동으로 컴파일러가 생성자 추가 
 *                    static 
 *        -------------------------------------------
 *      } 
 *      => new 연산자 => 메모리에 변수/메서드 동시에 저장
 */
public class Chapter06_정리 {

	public static void main(String[] args) {

	}

}
