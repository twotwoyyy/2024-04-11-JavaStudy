package com.sist.main;
/*
 *	1. 클래스의 구성 요소
 *   = 데이터 + 기능 
 *   1) 데이터
 *     ------
 *      멤버변수                                          
 *    *초기화 (값을 지정) => 초기화 블럭 , 생성자 
 *    *클래스에서는 다른 데이터형을 모아서 관리/전송(브라우저,윈도우) => 한번에 모아서 전송
 *    --------------------------------------------------------------
 *    *인스턴스 변수 : new를 사용할때마다 따로 저장되는 변수 
 *    *정적변수 : 컴파일러에 의해서 자동으로 저장 => 메모리 공간 1개 (모든 클래스에서 공유)
 *     => 자동으로 기본 초기화 , 기본형/클래스/배열 사용가능 
 *    ------------------------------ 다른 클래스에서도 연결해서 사용이 가능(프로그램 종료시까지 유지)
 *    ---------------------------------------------------------------
 *    *지역변수 : 메서드 안에서만 사용이 가능한 변수 (지역변수,매개변수, 루프변수,임시변수)
 *            (단점) 변수의 초기화가 없다, 반드시 초기화 후 사용해야 한다 
 *    ------------------------------ 메서드가 종료되면 자동으로 사라진다 
 *    *생성자 : 객체 생성시 호출해야되는 메서드 
 *     = 생성자는 필요시에 사용한다 
 *     = 멤버변수, 정적변수, 메서드, 생성자 => 필요한 것만 골라서 사용이 가능, 구성요소는 다 필요한 것이 아니다 
 *     = 변수에 대한 초기화를 할 때 많이 사용한다 
 *     = 시작과 동시에 동작하는 내용을 쓸 때 많이 사용한다 
 *     = 예) 화면 UI, 웹 (데이터베이스 연동, 자동 로그인, 쿠키 읽기, 권한 부여)
 *     = 여러 개 사용이 가능, 없는 경우도 있다 (그러나 없는 경우엔 자동으로 컴파일러가 1개 첨부한다 = 매개변수 없는 생성자 (default 생성자) 
 *     (단점) 상속의 예외 조건 = 상속이 안된다, 클래스명과 동일, 리턴형이 없다
 *     = 객체 생성시에 호출되는 메서드, 다른 클래스에서도 사용이 가능(public), 여러 개가 있는 경우 (오버로딩)
 *     = 오버로딩 : 중복 함수 정의 => 같은 이름의 메서드를 여러 개 만든다 (매세드는 동일하나 매개변수 개수와 데이터형이 다르다)
 *               리턴형은 관계 없다, 접근지정어도 관계 없다 
 *               
 *   2) 메서드
 *      ----
 *      인스턴스 메서드 : new에 의해 따로 저장 
 *      공통 메서드 : static 
 *      --------------------------접근 지정어 => public (다른 클래스와 연결) 
 *      형식) public 리턴형 메서드명(매개변수...)
 *                             ------ 사용자가 요청한 내용 (id,pwd,검색어)
 *                               => 입력 / 동작 (마우스 클릭, 버튼 클릭) 
 *                  ---- 사용자 요청 처리 결과 => 목록/상세보기/홈페이지 ... 
 *                       출력 형태 : 목록 / 상세보기 / 
 *                                []    class 
 *      {
 *      	구현...
 *      	결과값 전송 
 *      	--------
 *      	return ...
 *      }
 *      * 메서드는 호출시마다 처음부터 다시 실행해서 메서드가 종료가 되면 원래 호출된 위치로 돌아온다 
 *      * 메서드의 사용 이유(목적)
 *        = 반복을 제거 (반복적인 코딩) 
 *           : 반복 코딩 나올 때 반복문이 가능한지 메서드 처리가 되는지 본다 => 코드의 간소화
 *        = 관련된 명령문을 모아서 관리 => 가독성이 좋다 (구조화된 프로그램) => 기능 분리 
 *          --------- 입력 / 출력 ... 
 *        = 재사용 (수정,추가 편리)
 *        
 *      * 호출 
 *        -멤버변수 / 메서드 
 *        -인스턴스 
 *          객체명.변수명, 객체명.메서드
 *        -static 
 *          클래스명.변수명, 클래스명.메서드
 *      * 사용법 (코딩) 
 *        -변수 => 인스턴스 변수 중심
 *          데이터 보호: private 변수, 다른 클래스에서 연결하려면 변수의 기능 설정 getter/setter (캡슐화) 
 *        -메서드 => 인스턴스 메서드 중심
 *                다른 클래스와 연결 => public 
 *        -생성자 => 필요시에만 사용 => 자동으로 추가 : public 
 *      ---------------------------------------------- 웹사이트 => 변수 추출 / 기능 추출 
 *                                                     -------------------------- 요구사항 분석
 *      클래스의 구성요소: 어떤 데이터를 사용자에게 보여줄지 (멤버변수)
 *                   데이터를 보여주기 위해 어떤 기능을 설정할지 (멤버메서드)
 *                   시작과 동시에 어떤 화면을 보여줄지 (생성자) 
 *         
 */
public class MainClass_02 {

	public static void main(String[] args) {

	}

}
