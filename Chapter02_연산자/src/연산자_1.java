/*
 * 	자바의 기본 문법
 * 	  => 1. 데이터 저장
 *          변수 / 상수  => 변수: 데이터를 한 개만 저장하는 공간
 *                       ----
 *                       | 메모리 공간 크기 결정 
 *                         => 정수 / 실수 / 문자 / 논리
 *                         => 기본 저장 크기를 제공 (기본 데이터형)
 *                         변수: 변경해서 사용이 가능 
 *                         상수: 변경할 수 없는 공간
 *          ================================================
 *          배열 : 여러 개를 동시에 저장 (같은 형만 저장 가능)
 *          클래스 : 여러 개를 동시에 저장 (다른 데이터형도 저장 가능)
 *          
 *    => 2. 데이터 가공 (사용자 요청시에)
 *          연산자 / 제어문
 *          ------------
 *          => 메소드 
 *          
 *    => 3. 가공된 데이터를 출력
 *          => 명령프롬프트 : Application => windows 
 *          => 브라우저 : Web Application *****
 *          => 핸드폰 : Mobile Application
 *                   => Java (x) , Kotlin , Flutter (Dart언어)
 *                   
 *    => 4. 데이터 분석 : 파이썬 
 *    => AWS
 *          
 * 	객체 지향 프로그램
 *  예외 처리
 *  라이브러리 활용
 * 	---------------
 * 	1) 오라클 연결
 * 	2) wep => JSP => JQuery (Ajax) => 1차 프로젝트
 * 	3) Spring => VeuJS => 2차 프로젝트
 * 	4) Spring-Boot => React => 3차 프로젝트 (개인)
 * 	5) Python : Numpy , Pandas , Matplotlib
 * 	6) AWS (클라우드) => 호스팅 
 * 	*** Full stack : JavaScript => 동적 페이지
 * 		JQuery(Ajax) , VueJS , React(Redux,React-Qeury)
 * 	    *** TyoeScript , NextJS
 * 
 * 
 * 	2024-04-15 연산자
 *  1) 변수 : 데이터 1개만 저장하는 메모리 공간
 *     데이터를 저장하기 위한 작업
 *     1. 메모리에 별칭 설정
 *        ---- 주소대신 이름으로 저장
 *        0번지-------
 *             사용중
 *        4번지-------
 *             사용중
 *        8번지-------
 *             저장 ===> 이름 부여 (변수)
 *        12번지------
 *        ** 식별자 => 한 개의 클래스내에서는 같은 변수명을 사용할 수 없다
 *        = 알파벳이나 한글로 시작한다 
 *          (알파벳은 대소문자를 구분)
 *        = 문자의 갯수는 제한이 없다 (3~10 압축) => 어떤 데이터가 저장됐는지 확인
 *        = 숫자를 사용할 수 있다 (앞에 사용 금지)
 *        = 특수문자 ( _ , $ ) => 위치는 상관 없다
 *        = 키워드 사용 불가: 자바에서 사용하는 문자열(단어)
 *          int, double ... (보라색)
 *        = 공백을 사용할 수 없다
 *          
 *     2. 메모리 크기 (데이터형) 
 *     --------------------------------------------------
 *      정수 
 *       *byte (1byte) => 네트워크 통신 , 
 *                       외부 데이터 읽기 (크롤링)
 *                       파일업로드 / 파일다운로드
 *        형식) 
 *            byte 변수명=값
 *            => 값은 -128~127까지만 사용이 가능
 *            => byte는 연산처리가 되면 결과값 int
 *               -----------------------------------------
 *               byte+byte = int
 *               byte a =127
 *               byte b =127
 *               a+b=int(범위 초과)
 *       *int (4byte) => 프로그램에서 가장 많이 사용되는 데이터형
 *                       정수 => int가 default
 *                       컴퓨터에서는 모든 정수를 int로 인식
 *        형식) 
 *            int 변수명=값
 *            => 값을 사용할 수 있는 범위 : -21억 4천~21억 4천
 *       *long (8byte) => 금융권, 빅데이터, AI
 *        형식) 
 *            long 변수명=값 => 큰값이면 설정 => 파일 크기
 *       
 *       크기 : byte < int <long
 *       
 *       *** 구분자
 *       int a=100
 *             ----
 *             4byte
 *       long b=100L => L,l
 *              ----
 *             8byte
 *     ---------------------------------------------------
 *       실수 : 소수점 저장
 *        *float (4byte) => 많이 사용하지는 않는다
 *               => 구분자 : F/f
 *         형식) float f=10.5 ==> 오류 
 *                    ------ double
 *              float f=10.5f(F)
 *        *double (8byte) => 실수, 가장 많이 사용되는 데이터형
 *               => default(컴퓨터에서 실수가 있는 경우 double)
 *               => 실수점 15자리수까지 인식
 *        ****크기 :  정수 < 실수 
 *                  long < float 
 *          -크기는 바이트를 따지지 않고 수에 대한 표현을 따짐
 *     ---------------------------------------------------
 *       문자 : char (2byte) => 문자는 음수가 없다 (0~65535)
 *             => 각국의 언어를 표현 (유니코드) => 호환성이 좋다
 *             값은 => 문자 ' ' , 정수값 사용이 가능
 *         형식) 
 *             char a='A'
 *             char b=65 (예외 사항)
 *             => char는 연산처리시에 정수형으로 변경
 *             'A' => 65
 *             'a' => 97
 *             '0' => 48
 *     ---------------------------------------------------
 *       논리 boolean (1byte) => true/false만 저장이 가능
 *          => 조건 / 제어문 
 *         형식)
 *            boolean b=true 
 *          ** 크기는 비교할 수 없다
 *          ** 기본 연산이 안 된다
 *            ------ 부정연산자, 비교연산자, 논리연산자, 삼항연산자
 *     ---------------------------------------------------
 *       참조형 (배열, 클래스) => 메모리 주소 이용
 *     ---------------------------------------------------
 *     3. 변수 형식
 *        데이터형 변수명; 
 *        ***사용시에는 반드시 변수명=값을 대입해야 사용이 가능
 *        정수
 *          byte b;
 *          b=10;
 *          int a=10;
 *          1ong 1=100L
 *     4. 초기값
 *         임의로 지정 => 변수(필요시에 따라 변경이 가능)
 *         1) 선언 => 초기값
 *            사용자로부터 값을 받을 경우 , 난수 (임의로 추출시)
 *         2) 선언과 동시에 초기값
 *         
 *  ===============================================================
 *  
 *    연산처리
 *    피연산자 / 연산자
 *    -----
 *    10 + 10
 *    --   --
 *     |    |
 *     ------
 *       |
 *      20
 *      
 *  --------------------------------------------------------------
 *   단항연산자 : 연상 대상이 1개
 *     = 증감연산자 : 1개 증가 / 1개 감소 => 기호 : ++, --
 *     ex) int a=10;
 *         a++;
 *         ==> a=11
 *         a--;
 *         ==> a=9
 *         
 *     = 부정연산자 : true->false , false->true : boolean만 사용 가능
 *         기호: !
 *     ex) boolean b=true
 *         !b => false (조건, 로그인, 검색어 등에 사용)
 *         
 *     = 형변환 연산자 => 모든 데이터형은 변경이 가능 (boolean 제외)
 *       int => double , double => char .. 
 *       형식) 
 *           10.5 ==> double
 *           (int)10.5 ==> 10 (소수점이하 제외)
 *           -----
 *           
 *    이항연산자 : 연상 대상이 2개
 *     = 산술연산자
 *      + , - , * , / , %(나머지)
 *     = 비교연산자 : 결과값 => boolean (true/false)
 *      ==(같다) ex) 6==7 (false)
 *      !=(같지 않다) ex) 6!=7 (true)
 *      **기준점 : 왼쪽
 *      < (작다)
 *      > (크다)
 *      <= (작거나 같다)
 *      >= (크거나 같다)
 *     = 논리연산자 : 결과값 => boolean (true/false)
 *      &&(앤드) => 직렬 연산자 (범위, 기간 안에 있는 경우) => 예약,체크인/체크아웃 ...
 *      ||(오아) => 병렬 연산자 (범위나 기간을 벗어나는 경우) => 예약일이 아닐경우 체크인 체크아웃 벗어날 떄..
 *     = 대입연산자 : 결과값을 다시 저장할 경우
 *      ***= 대입
 *      ex) int a=10
 *          ***+=
 *          ***-=
 *          *=
 *          /=
 *          %=
 *          op=
 *    삼항연산자 : 연상 대상이 3개 => if~else로 후에 바뀜 => 페이징, 복잡한 소스 코딩이 있는 경우 쓰임
 *                                               => 웹, 게임 프로그램, 네트워크 프로그램 등
 *        (조건)?값1:값2
 *        => 조건 : true => 값1
 *                 false => 값2
 *                 
 *   38p => 산술 연산자 ( + , - , * , / , % )
 *   *** 주의점 : 자바의 모든 연산은 같은 데이터형끼리만 가능 
 *                             --------------
 *   ex) int+int = int
 *       int+long = long ( long형으로 변경후에 연산)
 *       char+int = int (char가 int로 변경후에 연산)
 *     =>데이터형을 큰형으로 변경후에 연산)
 *    *** 데이터형의 크기 byte < char < int < long < float < double
 *    *** 주의점 
 *    byte + byte = int
 *    char + char = int
 *    byte + char = int
 *    --------------------int보다 작은 데이터형은 연산시에 결과값이 int
 *    
 *    iny + double + char = double 
 *    결과값은 가장 큰 데이터형이 나온다 
 *    
 *    / (나누기)
 *    ** 주의점 
 *    => 0으로 나누면 오류 발생 (10/0), 0으로 나눌 수 없다 
 *    => 정수/정수 ex) 5/2 = 2 (소수점은 제외됨) => 소수점 필요시 정수를 실수로 나누어야 함 
 *    
 *    % => 나누고 나머지값
 *     ex) 5%2 => 1 => 배수
 *     *** 주의점
 *     5%2 = 1
 *     5%-1 = 1
 *     -5%2 = -1
 *     -5%-2= -1 
 *     -------------나누고 나머지값은 항상 왼쪽편 부호를 따라 간다
 *     
 *    =====================================================================
 *    
 */
public class 연산자_1 {

	public static void main(String[] args) {
		//국어 영어 수학 => 총점 , 평균
		int kor=80;
		int eng=75;
		int math=90;
		int total=kor+eng+math;
		double avg=total/3.0;
		System.out.println("국어 점수:"+kor);
		System.out.println("영어 점수:"+eng);
		System.out.println("수학 점수:"+math);
		System.out.println("총점:"+total);
		System.out.printf("평균:%.2f",+avg);

	}

}
