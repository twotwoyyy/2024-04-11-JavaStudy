package com.sist.main;
/*
 *	8장 283page
 *	예외처리
 *	  = 최적화 : 실행 속도 
 *    = 가독성 : 보기 편하게 => 쉽게 
 *    = 견고성 : 프로그램이 비정상종료가 되지 않게 
 *    --------- 예외처리 (에러를 사전에 방지 => 비정상 종료를 방지하는 프로그램 
 *  자바 
 *    에러 =====> 수정이 불가능한 에러 (메모리가 부족, 쓰레드 충돌)
 *    예외처리 ==> 소스상에서 수정이 가능한 에러 (파일명 오류, URL주소 오류...)
 *    에러가 발생하는 요소
 *     1. 사용자의 입력 부주의 : 잘못된 입력이 있는 경우 (정수 => 문자열)
 *        --------------- if(조건문 처리) => 유효성 검사
 *     2. 프로그래머의 실수 : 배열의 범위 초과, 반복 수행 ... 클래스 메모리 할당이 없는 상태에서 사용 
 *                       변수의 초기화가 없는 상태 ... , 잘못된 입력
 *   => 예외처리 
 *      = 사전에 에러 방지
 *      = 비정상 종료를 방지하고 정상 상태를 유지
 *      = 예외처리 => 에러 발생시 에러 부분을 건너뛴다 
 *       ----------------------------------- 에러를 수정해주는 것은 아니다
 *   => 예외처리 방법
 *      = 예외 복구 : try ~ catch
 *       (try: 정상수행 할 수 있는 문장 / catch: 에러발생시 처리 => 복구 ) 
 *      = 예외 회피 : 처리하지 않고 예외 발생시 시스템에 의해 처리
 *                 메소드 뒤에 첨부 
 *                 ex) 메소드() throws 예외처리
 *      ------------------------------------
 *      = 임의 발생 : 테스트용으로 주로 사용 => 프로그램이 정상적인지 확인
 *                 ex) throw => 에러를 발생 => 확인 (견고한 프로그램인지) 
 *      = 사용자 정의 예외 : 자바에서 지원하지 않는 예외처리가 존재 => 필요시 직접 예외처리를 만들어서 사용 
 *   => 예외처리의 상속도 => 처리하는 순서가 존재 
 *                   object
 *                     |
 *                  Throwable : 예외처리 최상위 클래스
 *                     |
 *             ---------------------------------------
 *             |                                     |
 *           Error                               Exception
 *         => 처리가 불가                          => 처리가 가능 (소스상) 
 *         => 종료 후에 다시 시작                    ex) 0으로 나누는 경우, URL 주소 틀림, IP 틀림, 파일명 불일치 ....
 *                          처리가 가능한 에러 => 예외처리
 *                          Exception
 *                             |
 *           ------------------------------------------
 *           |                                        |
 *        (CheckedException)                       (UnCheckedException)
 *        => 컴파일시 예외처리를 확인                     => 컴파일시에 예뢰를 확인하지 않는다 
 *        => 반드시 예외처리를 한 후에 사용                => 필요시에 예외처리를 한다 
 *        => java.io : 파일                         => 사용자 입력을 받는 경우
 *        => java.sql : 오라클 연결                   => 실행시 에러 
 *        => java.lang : 쓰레드 연결                  => java
 *        => java.net : 네트워크 
 *        => 오픈 API : Jsoup
 *        => 웹(네트워크) : 반드시 예외처리 
 *        => javac
 *        => 9장 라이브러리 => 자바에서 지원하는 클래스의 집합
 *           ------------------------------------
 *           => java.lang, java.util, java.io
 *           => java.net, java.sql
 *           ------------------------------------
 *           => javax.http.servlet.=> 웹관련 => JSP
 *           
 *     *CheckedException
 *     ---------------- 반드시 예외처리를 해서 사용한다 (컴파일시에 예외처리가 되어있는지 확인)
 *     | File NotException (파일 에러)
 *     | IOException (입출력 에러)
 *     ------------------------- 파일과 관련
 *     | SQLExceptiom
 *     ------------------------- SQL (오라클 연동)과 관련
 *     | URLMalformedException 
 *     ------------------------- URL (네트워크) 관련
 *     | ClassNotFoundException 
 *         Class.forName() => 클래스명으로 메모리 할당 
 *     ------------------------- 리플렉션 관련
 *     | InterrupedException 
 *         Thread.sleep() => 충돌 방지 
 *       => 쓰레드는 프로그램 안에서 여러 개의 프로그램을 동시에 실행 
 *     ------------------------- 쓰레드 관련
 *     
 *     *UncheckedException 
 *     ------------------- 필요시에만 예외처리를 한다 (생략 가능)
 *                         지금까지 사용한 클래스 
 *     | ArrayIndexOutOfBoundsException => 배열범위 초과
 *     | ClassCastException => 클래스 형변환 
 *     | ArithmeticException => 산술 오류 => 0으로 나누는 경우
 *     | NullPointedException => 메모리 할당이 없는 상태에서 객체 사용시 ... / 클래스에서만 발생 
 *      --------------------- String, 윈도우 관련
 *                            ------- 멤버변수 선언시 => 자동 초기화 => null, 크롤링 => 데이터가 없는 경우 
 *                            
 *         예외처리 상속도 (가장 위로 올라갈 수록 예외처리 포함범위가 크다)
 *         ----------
 *           Object : 최상위 클래스 
 *              |
 *          Throwable
 *              |
 *     --------------------
 *     |                  |
 *    Error           Exception
 *                        |
 *              ----------------------
 *              |                    |                                    
 *          IOException          RuntimeException : 실행시 에러 => 필요시 예외처리
 *          SQLException             |
 *          => 반드시 예외처리 (필수)  ArrayIndexOutOfBoundsException
 *                               ClassCastException
 *                               (위로 올라갈 수록 에러처리 범위가 크다)
 *          
 *         *** 프로그램 제작
 *          1. 설계 => 벤치마킹 (웹, 게임, ... ) => 모방 => 새로운 내용을 만든다 
 *             => 영화가 종료 => 어디를 갈까?
 *             => 캠핑장 => 레시피
 *             => 자격증 => 교재 추천 
 *             : 모방 중에 없는 내용을 추가해 나가는 것 
 *          2. 변수 설정 => 초기화 필요 여부
 *            => 생성자 (인스턴스)
 *            => static => static 블록을 이용한다
 *          3. 기능 설정 => 메소드 => 메뉴, 버튼, 입력 .... 
 *             ---------------
 *             = 예상되는 에러를 추출 => 예외처리 처리를 한다 => 프로그램의 비정상 종료 방지 
 *         *** 예외처리는 실무 => 한 개 (상위 클래스를 이용하는 경우가 많다) 
 *             상속도 => 상속을 내리는 클래스는 하위 클래스의 예외를 포함하고 있다 
 *             => 한 번에 처리가 가능하다 
 *             예) 
 *               배열을 선언 => ArrayIndexOutOfBoundsException 
 *               정수를 입력 받아서 => 정수가 입력 안된 경우 => NumberFormatException
 *               나누기 한다 => ArithemticException 
 *               => 나눠서 예외처리, 통합해서 예외처리 => 통합해서 처리가 가능
 *               try { 
 *                 배열 선언
 *                 정수 입력
 *                 나누기
 *                 ======> 평상시에 코딩 => 실행 가능한 프로그램을 서술  
 *               }catch(ArrayIndexOutOfBoundsException)
 *               {}
 *               catch(NumberFormatException)
 *               {}
 *               catch(ArithemticException)
 *               {} ... 여러 개 올 수 있다 
 *               
 *               -------
 *               try { 
 *                 배열 선언
 *                 정수 입력
 *                 나누기
 *                 ======> 평상시에 코딩 => 실행 가능한 프로그램을 서술  
 *               }catch(RuntimeException)
 *               {}

 *               try { 
 *                 배열 선언
 *                 정수 입력
 *                 나누기
 *                 ======> 평상시에 코딩 => 실행 가능한 프로그램을 서술  
 *               }catch(Exception)
 *               {}
 *               
 *               try { 
 *                 배열 선언
 *                 정수 입력
 *                 나누기
 *                 ======> 평상시에 코딩 => 실행 가능한 프로그램을 서술  
 *               }catch(Throwable)
 *               {}
 *               
 *           ==> 위로 올라갈 수록 예외처리 기능을 많이 가지고 있다 (Throwable이 가장 많이 가지고 있다) 
 *           
 *    1. 예외처리의 형식 
 *       ----- 에러가 발생시에 건너뛰는 역할 (에러를 처리해주는 것은 아니다)
 *       
 *       try{
 *         정상 수행을 할 수 있는 소스  
 *         ------ 평상시 코딩 => 임의로 에러 발생하면 안된다 
 *         1) 에러가 없는 경우 => try에서 종료
 *         2) 에러가 있는 경우 => 해당 에러를 등록한 catch를 찾는다 
 *       }catch(예외처리 클래스){
 *         에러가 발생시에 복구하는 위치 
 *       }
 *       소스 코딩을 수행 
 *   ex) 
 *       try{
 *           문장 1 
 *           문장 2
 *           문장 3
 *           문장 4
 *           문장 5
 *           => 오류가 없는 경우 => 1,2,3,4,5,7,8 까지 수행 후 프로그램 종료 
 *           => 오류가 있는 경우 => 
 *       }catch(예외처리){
 *           문장 6 (에러 발생시 처리하는 부분으로 에러가 없는 경우엔 catch는 수행하지 않는다)
 *       }
 *       문장 7
 *       문장 8
 *       프로그램 종료  // 여기까지 와야 정상 수행 
 *      => 만약 문장 3에서 에러 발생시 1,2는 정상 수행 후 catch로 이동 6,7,8 후 종료 
 *      
 *      try절 : 정상수행이 가능한 소스 코딩을 하는 부분 => 모든 프로그램 소스가 서술 
 *       => 1개만 설정
 *      catch절 : try 수행 중에 에러가 발생하면 처리 => 복구
 *       => 여러 개 사용 가능 
 *       => 에러 발생시 1개의 catch만 수행 => 다중 조건문과 비슷 
 *          -------------------------- 찾아서 처리해주는 역할 : JVM 
 *       
 *       => 소스 전체를 예외처리 
 *       => 예상되는 부분만 예외처리가 가능 
 */

class A {
	
}
class B extends A {
	
}
public class 예외처리_01 {
	String name; // null값 초기화 
	public void display() {
		name=name.substring(0,1);//java.lang.NullPointerException 값이 없는데 자르라해서 오류
		System.out.println(name);
	}

	public static void main(String[] args) {
//		System.out.println("여기까진 실행된다");
//		int[] arr=new int[2];
//		arr[0]=10;
//		arr[2]=20; //에러 발생 부분 => 인덱스 범위 초과 => 비정상종료 
//		System.out.println(arr[0]+","+arr[1]);
		//A a=new A();
		// 메소드가 A가 가지고 있는 것을 호출 
		//B b=(B)a;
		// B가 가지고 있는 것을 호출해야하는데 A를 호출했으니 에러 
		// 따라서 A a=new B();로 변경해야한다 
//		System.out.println(10/0); // ArithmeticException
		//예외처리_01 a=new 예외처리_01();
		//a.display();
	
	}


}
