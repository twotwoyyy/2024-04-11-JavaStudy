package com.sist.main;

/*
 *	1. 반복 문장이 많다 => 제거
 *     ----------- 메소드 
 *     재사용, 다른 클래스에서 연결 => 한 가지 기능만 수행 (구조적 프로그램) => 에러 잡기, 수정이 쉬움 
 *     -------------------- 메소드 
 *  2. 관련된 클래스가 여러 개 있다 => 한 개의 객체명으로 처리 
 *     -------------------- 인터페이스 
 *  3. 비정상 종료 없이 프로그램을 유지 => 예외 처리
 *     ----------------------------------
 *     => 변수 연습 : 사이트 
 *     ------------------
 *     => 누가 잘 묶어서 사용하는가 => 재사용 ***
 *     ----------------------
 *       변수 => 배열 / 클래스
 *       명령문 (연산자, 제어문) => 메소드 
 *       필요시 변수 초기화 => 생성자 이용 
 *       => 클래스 여러 개 => 인터페이스 
 *       => 에러 처리 => 예외 처리 
 *     => 윈도우 => 상속 => 오버라이딩 (인터페이스) 
 *     => 모바일, 웹, APP => 동일
 *        ------------------- JSON
 *                            JavaScript Object Nontation 
 *                            자바스크립트 객체 표현법 
 *     --------------------------------------- ~8장 : 자바의 기본 문법
 *     => 라이브러리 + 사용자 정의 클래스 
 *        ----------------------- 조립 (응용) 
 *     
 *     => 예외 처리 
 *        1) 파일 입출력 
 *        2) 네트워크 
 *        3) 오라클 연동 
 *           ---- 데이터를 모아두는 장소 (영구적인 저장장치)
 *           ---- 파일의 단점 : 여러 개를 연결해서 사용할 수 없다 
 *           ---- 오라클은 여러 개 연결이 가능하다 (RDBMS)
 *       ------------------------------------------ 반드시 예외처리 해야한다
 *     1. 생략이 가능 
 *       = import java.lang.*;
 *       = void => return 
 *       = 생성자 생략 
 *       = extends Object 
 *       = 실행시 파일 => 예외처리 생략이 가능
 *       -----------------------------
 *       = interface
 *        => 상수
 *        => 추상메소드
 *        => default
 *        => static 
 *        
 *        interfaca A{
 *          (public static final) int a=10;
 *          => (public) static tinal int A=100;
 *          
 *          (public abstract void disp);
 *          ==> public (abstract) void disp();
 *          
 *          (public) default void aaa(){}
 *        }
 *        => interface는 접근지정어에 public만 사용 가능하다 
 */
interface ABC{
	int AA=100; //public 
}
public class 예외처리_09 {  

	public static void main(String[] args) {

	}

}
