/*
 *	데이터를 묶어서 사용 => 1개 이름으로 여러 개의 변수에 접근 
 *					  -------------------------
 *					  배열 : 같은 데이터형 크기를 이용한다 => 고정적이다
 *					  클래스 : 다른 데이터형을 모아서 관리 => 가변적이다 
 *	자바는 클래스로 시작해서 클래스로 종료
 *	---------------------------
 *	클래스 구성요소 
 *	-----------
 *	=> 사용은 데이터형/연산자/제어문/메소드
 *		    ---------------------필요한 부분은 라이브러리 사용
 * *  		1장 : 자바 설치, 특징
 *  		-------------------------------------------
 *  		2장 : 변수 / 데이터형
 *  		3장 : 연산자
 *  		4장 : 제어문 / 배열
 *  		5장 : 클래스 ***, 6장(객체지향의 특성) 7장(클래스 종류) ***
 *  		-------------------------------------------- 웹 연결
 *  		9장 ~ 11장 : 라이브러리 (암기)
 *  		12장 : 핵심 => 오라클 연동 
 *  
 *  		프로그램
 *  		-----
 *  		네트워크 ====> C/C++
 *  		데이터베이스 ==> Java => 웹 
 *  자바 메모리 구조
 *  ----------------------
 *    메소드 영역
 *    --------
 *       1. 메소드
 *       2. static 변수 
 *  ----------------------
 *    스택 => 메모리 자체 관리 
 *    ---
 *    	1. 지역변수
 *    	2. 매개변수 -------------> {}이 종료되면 자동으로 메모리에서 회수
 *  ----------------------
 *    힙 => 프로그래머가 관리 => GC(실제 데이터가 저장되는 영역)
 *    --                      ------------------- 프로그램이 종료될 때까지 유지
 *     1. 배열
 *     2. 멤버변수
 *  ----------------------
 *  ------------------------------  
 * 	 변수 
 *    지역변수 / 매개변수 => 메모리에 저장 (메소드 호출)
 *    				    사용범위는 메소드 안에서만 사용이 가능
 *                      지역변수 : 요청처리를 위한 변수
 *                      매개변수 : 사용자 요청값이 있는 경우
 *                   => 저장되는 위치 : Stack
 *    멤버변수 => 메모리에 저장 시점 => new를 이용할 때마다 따로 생성 
 *           => 사용범위는 클래스 전체 / 다른 클래스에서도 사용이 가능 
 *    공유변수 => 메모리 저장 시점 => 컴파일시 한 개 메모리 공간 생성 
 *           => 사용범위는 클래스 전체 / 다른 클래스에서도 사용이 가능 
 *     class A
 *     {
 *        int a;
 *        int c;
 *        --------저장이 안된 상태
 *        static int b; ==> 저장 / 공유변수
 *     }  
 *     a,c => A aa=new A(); => 저장되는 시점
 *     
 *        Stack             Heap
 *       ---aa---
 *         0X100
 *       -------- ↖
 *                메모리 주소----------new (동적 메모리 할당) 생성시마다 메모리 생성 => 변수 묶어준다
 *                 0X100    -----
 *                            0 -----> a ===> aa.a
 *                          -----
 *                            0 -----> c ===> aa.c ( . => 메모리 주소 접근 연산자)
 *                          -----
 *                       -----------
 *                       ** aa는 메모리 주소에 연결된 변수만 사용이 가능 
 *    A bb=new A();
 *    
 *    --bb--
 *     0X200
 *   -------- ↖ 0X200 --------
 *                   ------
 *                      0  --> a ==> bb.a              
 *                   ------
 *                      0  --> c ==> bb.c
 *                   ------
 *                  ---------
 *    static => 전체 데이터가 동일해야 할 경우 주로 쓰인다 
 *    
 *    ---b---
 *       0    ==> aa.b, bb.b, cc.b, A.b (객체나 클래스이름통해 접근 가능, 공유)
 *    -------
 *     멤버변수 사용이 거의 대부분
 *     ----- 지역변수/매개변수
 *     ** 프로그램 종료시까지 메모리 유지 / 따로 저장이 되기 때문에 관리하기 편하다 
 *        다른 데이터형 여러 개를 묶어서 사용이 가능
 *     ** 프로그램 : 데이터 관리
 *       React / Vue / Next => 데이터 관리 프로그램
 *                             -------- AI / 머신러닝 / 딥러닝 => data.go.kr
 *     변수 
 *     --- 초기화
 *      멤버변수 / 공유변수 => 기본 초기화
 *       int=0,boolean=false,double=0.0,String=null,char='\0'
 *      멤버변수
 *      공유변수 
 *      ----- 명시적인 초기화
 *      ----- 자동 초기화
 *      ----- 메모리에 저장 초기화 
 *      
 *      class A
 *      {
 *       int b; => 0
 *       int a=100; => 명시적인 초기화 
 *       static int c;
 *       static int d=100;
 *       => 자동 초기화 (호출 없이)
 *        *멤버변수 초기화
 *        {
 *          => 초기화 블록
 *          a=1000;
 *        }
 *        *공유변수 초기화
 *        static
 *        {
 *        	d=1000;
 *        }
 *        
 *        {} => 멤버변수 초기화
 *        static {} => 공유변수 초기화 
 *        
 *      }
 *      지역변수 => 반드시 초기화 
 *  ------------------------------
 *   생성자 / 초기화
 *  ------------------------------
 *   메소드 : 저장된 변수 활용
 *   ---- 기능 
 *   => 리턴형 / 매개변수 
 *       |       |
 *       |      사용자가 요청한 값 => 웹 (검색어,로그인,회원가입 ...)
 *      요청처리에 대한 결과값 
 *  ------------------------------
 *  
 *   클래스 => 재사용 목적 (부품) => 컴포넌트 
 *    |
 *   1. 데이터 보호 (노출X) => 캡슐화/은닉화
 *   2. 재사용 => 상속 / 포함 
 *             is-a has-a
 *   3. 유지보수 =>   수정     추가
 *                 ---     ---
 *               오버라이딩, 오버로딩 => 다형성
 * ------------------------------------------- 6장 (면접의 단골)
 *  *** 라이브러리 사용 
 *      ------------ 미국 (정보 제공) : 시각적 효과
 *       | 프로그램에 맞게 변경 사용 => 오버라이딩
 *       | Math.random() => 형변환
 *       | substring(int s,int e)
 *                         ----- e-1
 *       | Spring : 로드존슨 => 전자정부 프레임워크 
 */
public class 클래스변수 {
	// 선언만 가능, 구현 불가 //블록을 또 열고 닫으면 구현 가능하긴 하다 
	// 변수 선언 , 메소드 선언이외엔 잘 쓰지 않는다 

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
