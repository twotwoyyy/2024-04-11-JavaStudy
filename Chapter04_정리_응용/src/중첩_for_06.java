/*
 *	1. 중복 없는 난수 => 응용
 *	--------------------
 *	숫자 야구 게임 
 *	----------
 *	1. 난수 발생 => 3개 ex) 3 6 9 
 *	2. 사용자 입력 
 *		ex) 7 8 9 => 3 9 6 (자리수 같은게 1개) / 힌트: 1S-2B
 *											----------- 숫자는 같으나 다른 자리 2개 
 *	3. 힌트
 *		같은 자리 => strike(S) => 1S
 *		다른 자리 => ball(B)   =>
 *
 *		2장 / 3장 / 4장
 *       |    |  -------------> 묶음
 *     연산자  제어문
 *     
 *     1) 묶음
 *     : 변수 여러 개를 묶어서 관리 
 *     : 변수 여러 개 => 제어문 사용이 어렵다 ===> 배열 사용 (변수 이름 1개=> 구분자: 인덱스 번호 )
 *     ---------------- 평문을 사용한다
 *     
 *     *** 배열은 변수가 3개 이상일 경우 사용
 *        !!! 3개 => 사용 용도가 같아야 한다 
 *     
 *     ==> 다음
 *         명령문 : 메소드
 *         한 개에 대한 정보 묶기
 *         클래스 
 *         ----------------- + 프로그램 
 *     
 *     난수 100개
 *     int a1=(int)(Math.random()*100)+1
 *     .
 *     .
 *     int a1=(int)(Math.random()*100)+1
 *     
 *     최대값 / 최소값
 *     int max=a1;
 *     if(max<a2)
 *       max=a2;
 *       ..
 *       ..
 *      if(max<a100)
 *       max=a100;
 *       
 *   -------------------------------------------------
 *   2장 연산자
 *   -----------
 *   종류
 *   단항연산자
 *   		[] , () ,          연산방향(==>) 1
 *          ++ , -- (전치연산)   <==         2
 *          ++ , -- (후치연산)   <==         3
 *          --------------- ! , (type)
 *          예) 
 *            (int)Math.random()*100
 *                 ------------------1번
 *            ----2번 
 *           ** (type) 형변환연산자
 *           -------------------
 *           숫자와 관련 / 클래스
 *           = Upcasting => 데이터형을 크게 만든다
 *            정수 => 실수
 *            문자 => 정수
 *           = Downcasting => 데이터형을 낮게 만든다
 *            실수 => 정수
 *            정수 => 문자
 *          
 *           크기 순서 
 *           -------
 *                    =========> Upcasting
 *            byte < char < int < long < float < double
 *                   <======== Downcasting
 *            
 *            ** 자동형변환 
 *              대입 / 연산
 *              int a='A'
 *                    ---- 65
 *              double d=10
 *                       --- 10.0
 *           ----------------------
 *           변경되는 조건 : 데이터형 변수명 = 값 
 *                       -----        ---
 *                       | 큰데이터형이어야 변경 (Upcasting)
 *                   왼쪽이 큰 경우에는 자동으로 변환
 *                   왼쪽이 작은 경우에는 강제로 변환
 *                   
 *             ** 강제형변환(필요에 의해 강제 변경)
 *                int a=10.5
 *                ---   ----
 *                int <(int)double
 *              !! 예외 char !! 
 *              
 *          *** 연산처리
 *           1) char는 자동으로 int로 변경 
 *           2) 연산처리시에는 큰데이터형으로 변경 => 연산처리 (같은 데이터형끼리만 가능) 
 *           !! int 이하 데이터형은 연산시에 int값의 결과가 나온다
 *           char + char = int
 *           byte + btye = int
 *           
 *           ex) byte b1=100;
 *               byte b2=30;
 *               byte b3= b1+b2; ==> 오류,범위 초과 => int로 변경
 *               (int)byte b3= b1+b2;<= 형변환 해주어야 한다 
 *           ------------------
 *           int + int = int
 *           double + double = double
 *                
 *               
 *   이항연산자
 *   	산술연산자  *,/,%         =====>      4
 *                           왼쪽 => 오른쪽
 *               + , -         =====>      5
 *               
 *            ** '+' 연산자 : 산술 외 문자열 결합 연산자
 *                                -------
 *                                "7"+7 => "77"
 *            ** '/' 연산자 : 정수/정수 = 정수
 *      비교연산자 < , > , <= , >= , == , !=   6
 *              -------------------------
 *              |숫자,문자,논리형(기본형) 비교 때 쓰임
 *             equals , instanceof
 *              |문자열   | 클래스 비교 때 쓰임 
 *             => 모든 결과값은 true/false 
 *      논리연산자 && ||
 *              &&              =====>    7
 *              ||              =====>    8
 *             우선 순위를 모르는 경우 => ()
 *             => 결과값은 true/false
 *             
 *             &&=> 범위에 포함될 때
 *                 : 조건 2개가 동시에 true => true
 *             ||=> 범위를 벗어날 경우
 *                 : 조건 2개 중에 1개라도 true => true
 *         -------------------- if , for , while에 많이 쓰인다 
 *         
 *   삼항연산자
 *   		조건 ? true:false ==> if~else
 *   		=> 웹/게임에서 소스가 길어질 경우 주로 사용 (복잡도↓)
 *             -- 단점 : 자바+CSS+JavaScript+HTML 구분해야하기에 복잡하다 => 삼항연산자 주로 사용
 *             
 *   대입연산자 : =, +=, -=          <===== 10 (뒤에서부터 처리)
 *   int a=10; : a라는 변수에 10을 대입한다 (x)
 *   			 10을 a변수에 대입한다 (o)
 *          => 대입 연산자는 가장 마지막에 처리되는 연산자 
 *       
 *    ====> 산술연산자 ==> 대입연산자
 *    ====> 제어문 : 비교연산자, 증감연산자 (반복문)
 *                 ----------------------
 *                 조건문: 비교, 논리 
 *    -------------------------------------- 자바 연산자
 *    3장 제어문 : 프로그램을 제어
 *    			= 반복 수행
 *                for : 반복횟수가 있는 경우 => 2차 for
 *                while : 반복횟수를 모르는 경우
 *                do~while : 반복회수를 모르는 경우 => 반드시 한 번 이상 수행 
 *    			= 건너뛴다 : 단일 조건문 
 *    			= 선택한 내용만 처리 : 다중 조건문 , 선택문 
 *    			= 오류 처리 : 조건문 ==> 처리를 못하는 경우에 예외처리 
 *    			  -------
 *    			  throw / try~catch : 반드시 예외처리 => file / 네트워크 관련
 *                                    -------------8장
 *                                    2~8장 => 기본 문법
 *                                    9~14장 => 라이브러리
 *                                    다른 프로그램 연결 : 네트워크 , SQL
 *             = 반복문에 제어
 *              종료 : break => 반복문,선택문에서만 사용이 가능
 *              제외 : continue => 반복문에서만 사용이 가능 
 *   ---------------------------------------------------------
 *    => 조건문
 *    => 1) 단일 조건문
 *    1. 제어문 형식
 *    	if(조건) 조건이 true일 경우 실행 
 *    	{
 *    		조건이 true일때만 수행하는 문장 
 *    		false면 건너뛴다
 *    	}
 *    2. 동작 순서
 *    	=> 조건이 맞는 경우에만 실행 
 *    3. 사용위치 확인 
 *    	=> 오류 처리 => 사용자 입력값을 받은 경우에 주로 처리 
 *    4. 조건 설정 
 *    	=> 비교연산자 / 논리연산자 
 *    	            -------- 범위 지정할 경우 
 *    ** if문을 여러 개 사용하면 독립적이기 때문에 모든 조건을 검색한다 => 속도가 느려질 수 있다
 *    ** 여러 문장을 동시에 수행이 가능  
 *    	if~else  => 선택조건문
 *    	true/false에 해당되는 소스 코딩
 *    	==> 한 줄 : 삼항 연산자 
 *    				=> combobox , 페이지 지정...
 *    		두 개로 나눠져 있는 경우
 *    		로그인 / 아이디 중복 / 회원가입 여부 / 검색어 입력 여부 ...
 *    		웹 => 무조건 동작 
 *    
 *    => 2) 다중 조건문 => 해당 조건문장만 수행 ex)키보드 입력, 게임, 메뉴 
 *    	if(조건문)
 *      {
 *      	한번만 실행, 조건문 true=> 수행 => 종료 
 *                        false=> 다음 조건문을 찾는다 
 *      }
 *      else if(조건문)
 *      {
 *       	한번만 실행, 조건문 true=> 수행 => 종료 
 *                        false=> 다음 조건문을 찾는다 
 *      }
 *      else if(조건문)
 *      {
 *      	 한번만 실행, 조건문 true=> 수행 => 종료 
 *                        false=> 다음 조건문을 찾는다 
 *      }
 *      else
 *      {
 *      	해당 조건이 없는 경우에 처리 => 생략이 가능
 *      }
 *      ======================> 단순화 : 선택문

 *      switch(정수,문자,문자열만 가능)
 *      {
 *      	case 1:
 *      		처리문장
 *      		break;
 *      	case 2:
 *      	case 3:  ==> if(num==2 || num===2)
 *      		처리문장
 *      		break; // 처리문장이 같은 경우 한번에 case 연달아 쓴다
 *      	...
 *      	default: 생략이 가능하다 
 *      }
 *      ===> 웹에서 사용빈도가 적다 => 네트워크 경우 수 , 게임에 많이 쓰인다 
 *          
 */
import java.util.Arrays;
import java.util.Scanner;
public class 중첩_for_06 {

	public static void main(String[] args) {
		// 1. 컴퓨터 난수 발생 => 1~9 사이의 중복 없는 숫자 3개 발생
		int[] com=new int[3];
		for(int i=0;i<com.length;i++) { //3번 반복
			com[i]=(int)(Math.random()*9)+1; //1~9
			// 중복 여부 확인 
			for(int j=0;j<i;j++) { // 생성된 난수만큼만 비교 
				if(com[i]==com[j]) {//같은 수가 있는지 확인 => 비교/논리 연산만
					i--; //다시 난수 발생
					break; //j가 있는 for문만 종료 ==> i++로 이동한다
				}
			}
		}
		//System.out.println(Arrays.toString(com));
		// 사용자가 입력한 데이터 저장 
		int[] user=new int[3];
		Scanner scan=new Scanner(System.in);
		// 2. 사용자 입력 요청
		while(true) { // 횟수를 모른다. 반복횟수가 없다 true => 정답시에 종료(무한루프)
			System.out.println("세 자리 정수를 입력하세요>>");
			int input=scan.nextInt();
			//오류 처리 (사용자가 꼭 세 자리 정수를 입력하지 않을 수 있기 때문) => 조건문
			if(input<100 || input>999) { // 세자리 정수 벗어난 범위 
				System.out.println("알림 ☞ 세자리 정수만 입력해야 합니다!!");
				// while문의 처음으로 이동 continue 사용 => 다시 조건식으로 이동 
				continue;
				/*
				 *	'continue' 
				 * while => 조건식으로 이동
				 * 			|-----------
				 * 	  while(조건식)      |
				 *   {                 |
				 *     continue; ------|
				 *   }
				 * for   => 증가식으로 이동 
				 *   for(초기값;조건식;증가식) | => 제외
				 *   {                   |
				 *     continue;----------
				 *   }
				 *  !! break는 while,for 상관없이 반복문을 중단 
				 */
			}
			// 세 자리 정수를 입력한 경우
			user[0]=input/100;
			// ex) 369/100 =>3
			user[1]=(input%100)/10;
			// ex) 369%100=> 69/10 => 6
			user[2]=input%10;
			// ex) 369%10 => 9
			// % : 이런 경우에 주로 사용
			
			// 오류 처리 => 2개 
			// 1. 같은 수인 경우는 안된다
			if(user[0]==user[1] ||
			   user[1]==user[2] ||
			   user[0]==user[2]) {
				System.out.println("알림!! 중복된 수는 사용할 수 없습니다");
				continue; // 다시 입력 
				// if => 단일 조건문 => 사용자 입력, 오류
			}
			// 2. 0을 입력하면 안된다 
			if(user[0]==0 || user[1]==0 || user[2]==0) {
				System.out.println("알림!! 0을 사용할 수 없습니다!");
				continue;
			}
			// 정상적으로 입력이 된 경우 
			// 힌트
			int s=0,b=0; //s는 숫자와 자리수가 맞는 경우
			             //b는 숫자는 있는데 자리수가 맞지 않는 경우
			for(int i=0;i<3;i++) { // com
				for(int j=0;j<3;j++) { //user
					if(com[i]==user[j]) { // 같은 수가 존재하는지 확인
						if(i==j) // 같은 수가 있고 같은 자리면
							s++;
						else
							b++; // 같은 수가 있고 다른 자리면 
					}
				}
			}
			// 3. 비교 => 힌트 제공 
			System.out.printf("Input Number:%d,Result:%dS-%dB\n",
					input,s,b);
			// 4. 정답 여부 확인 => 정답: 종료 / 오답: 다시입력
			//                     break   continue
			if(s==3) {
				System.out.println("Game Over!!");
				break;
			}
		}
		
		

	}

}
