package com.sist.main;
/*
 *	변수 / 메서드 / 생성자 
 *  -----------------
 *  접근 범위 
 *  => private : 멤버변수(데이터를 보호하는 목적)
 *  => public  : 다른 클래스와 연결 
 *               -------------
 *               메서드 / 클래스 / 생성자 
 *  라이브러리에서 제공
 *  
 *  * 접근지정어 => 멤버에서만 사용이 가능    / 지역변수는 접근지정어, static 사용불가 오로지 final만 가능
 *              ----
 *              "클래스영역"에 선언되는 
 *               -인스턴스,정적변수
 *               -메서드
 *               -생성자
 *             ====================== 다른 클래스에 사용할 수도 있기 때문에 접근 범위 설정 
 *  -------------------------------------------------------------
 *   private     : 자신의 클래스에서만 사용 가능 (접근 금지) => 개인정보 ..
 *                 ** 모든 멤버변수는 데이터 보호 => private
 *  -------------------------------------------------------------
 *   (default)   : 같은 패키지에서만 접근이 가능 => 키워드 없는 상태 
 *  -------------------------------------------------------------
 *   protected   : 같은 패키지 + 상속을 받은 다른 패키지에서 접근 가능 
 *  -------------------------------------------------------------
 *   public      : 모든 클래스에서 접근이 가능하게 만든다 
 *                 클래스, 메서드, 인터페이스, 상수, 생성자
 *  -------------------------------------------------------------
 *  
 *   => private < default < protected < public
 *      --------------------------------------
 *          |                             |
 *          -------------------------------
 *                       중요
 *   => 지역변수
 *      ------  final 외 다른 키워드는 사용이 불가능
 *      ------  멤버변수는 기본 초기화 => 바로 사용이 가능 
 *                     --------- 프로그램에 필요한 경우에는 초기화후 사용
 *      ------  but, 지역변수는 반드시 초기화 후 사용해야 한다!!!  
 *   
 *   => 메서드 : 기능 수행
 *      형식) 
 *       [접근지정어][옵션] 리턴형 메서드명(매개변수 목록)
 *                ----
 *                static, abstract
 *                ------ 클레스의 모든 영역에 공통 적용 
 *       --------- 다른 클래스와 통신 => public 
 *       {
 *           --- 사용자 요청에 대한 처리
 *           결과값 전송 => return;
 *       }
 *       
 *       1. 접근지정어 
 *          메서드 => 통신 담당 (소프트웨어 => 메세지) => 클래스와 클래스를 연결 => 모든 클래스에서 사용이 가능 
 *                  public 
 *          옵션 => static : 클래스 전체에서 동일한 기능을 가지고 있는 경우 
 *                 웹) 한글변환, 암호화, 복호화 
 *          리턴형 => 기본형, 배열, 클래스
 *                  | 데이터값이 한 개인 경우 : 기본형 
 *                  | 전송하는 데이터가 여러 개인 경우 : 배열
 *                  | 정보 출력시 변수가 여러 개 (목록, 상세보기) : 클래스 
 *          메서드명 : 식별자 => 소문자 시작 (가급적이면 한글은 사용하지 않는다) 
 *          매개변수 : 여러 개 사용이 가능 => 가급적 3개 이상 초과 x => 초과할시 배열, 클래스 이용할 것 
 *                  사용자가 보내주는 요청값의 개수를 모르는 경우 (... 가변형 데이터)  
 *          ** 리턴형은 요청에 대한 결과값을 출력해준다 
 *          ** 매개변수는 사용자가 요청한 값 ex) 로그인 요청 (ID,FWD), 검색 (검색어)
 *          ** 메서드는 호출하게 되면 처음부터 끝까지 수행한다 
 *       
 *       ==> 
 *          class A
 *          { 
 *            int a=10;
 *            --------- 저장이 안 된 상태
 *            staic b=20;
 *            ------------ 저장
 *            public void aaa(){}
 *            public int bbb(){}
 *            -------------------- 저장이 안 된 상태
 *            public staic vouid ccc(){}
 *            public staic vouid ddd(){}
 *            --------------------------- 저장
 *            
 *            => static은 자동 저장, 인스턴스는 저장 x
 *          }
 *          
 *          A aa=new A() <==저장
 *          
 */

public class 클래스_접근지정어 {

	public static void main(String[] args) {

	}

}
